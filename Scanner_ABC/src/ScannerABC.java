/* The following code was generated by JFlex 1.6.1 */

/* Secciï¿½n de declaraciones de JFlex */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>D:/SegundoSemestre2018/Compiladores e Interpretes/Proyectos/Proyecto1/Scanner/Scanner_ABC/src/ScannerABC.flex</tt>
 */
public class ScannerABC {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\1\0\10\0\1\0\1\2\1\6\1\6\1\3\22\0\1\1\1\67"+
    "\1\70\1\63\1\62\1\62\1\64\1\0\1\26\1\31\1\27\1\54"+
    "\1\53\1\12\1\10\1\33\1\7\1\5\10\5\1\61\1\53\1\57"+
    "\1\56\1\55\1\0\1\62\1\13\1\35\1\41\1\15\1\11\1\46"+
    "\1\37\1\44\1\23\1\4\1\52\1\40\1\25\1\14\1\16\1\50"+
    "\1\4\1\17\1\43\1\20\1\47\1\24\1\45\1\21\1\34\1\4"+
    "\1\53\1\0\1\60\1\62\1\4\1\0\1\13\1\35\1\41\1\15"+
    "\1\36\1\46\1\37\1\44\1\23\1\4\1\52\1\40\1\25\1\14"+
    "\1\16\1\50\1\4\1\17\1\43\1\20\1\47\1\24\1\45\1\21"+
    "\1\34\1\4\1\32\1\0\1\30\7\0\1\6\53\0\1\66\21\0"+
    "\1\65\37\0\1\65\114\0\2\22\115\0\1\42\u1ea8\0\1\6\1\6"+
    "\u0100\0\1\51\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\2\4\1\5\1\3\1\5"+
    "\7\3\1\0\3\3\1\5\1\6\1\5\1\7\1\5"+
    "\4\3\1\0\5\3\5\5\2\0\1\6\1\0\1\6"+
    "\1\10\1\11\1\12\2\0\1\4\1\12\5\3\1\0"+
    "\1\3\1\13\1\0\1\3\1\14\1\13\5\3\3\13"+
    "\1\3\2\0\1\11\1\7\2\15\7\3\3\0\4\3"+
    "\1\0\4\3\1\0\5\3\1\5\1\16\2\10\1\17"+
    "\1\20\1\21\1\0\1\12\1\0\3\3\1\14\4\3"+
    "\1\0\1\3\2\0\1\11\1\0\1\7\1\0\6\3"+
    "\2\0\2\3\2\0\1\3\1\13\4\3\1\10\1\22"+
    "\1\20\1\11\1\0\1\20\3\3\1\0\1\3\2\0"+
    "\1\11\1\15\1\0\2\3\2\0\4\3\1\0\3\3"+
    "\1\0\1\23\1\0\1\11\1\0\1\11\1\3\1\0"+
    "\1\3\2\0\2\3\1\0\2\3\2\23\1\0\1\11"+
    "\3\0\1\11\1\0\3\3\2\0\1\23\1\0\1\11"+
    "\1\0\1\11\1\3\1\0\2\23\2\0\1\11\7\0"+
    "\1\11\1\0\1\12";

  private static int [] zzUnpackAction() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\71\0\162\0\253\0\344\0\u011d\0\u0156"+
    "\0\u018f\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e"+
    "\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6"+
    "\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675\0\u06ae"+
    "\0\u06e7\0\u0720\0\u0759\0\u0792\0\71\0\u07cb\0\u0804\0\u083d"+
    "\0\u04ad\0\u04e6\0\u0876\0\u04e6\0\u08af\0\71\0\u08e8\0\u0921"+
    "\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9"+
    "\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\253"+
    "\0\253\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\71"+
    "\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\71\0\u0f5d"+
    "\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125"+
    "\0\u115e\0\u1197\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed"+
    "\0\u1326\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5"+
    "\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2\0\u0993\0\u160b\0\u160b"+
    "\0\u1644\0\u167d\0\u16b6\0\u16ef\0\u1728\0\u1761\0\71\0\u179a"+
    "\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962"+
    "\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a"+
    "\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2"+
    "\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u0993\0\u1e81"+
    "\0\u1eba\0\u1ef3\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7\0\u2010"+
    "\0\u2049\0\u2082\0\u20bb\0\u1a0d\0\u20f4\0\u212d\0\u2166\0\u219f"+
    "\0\u21d8\0\u2211\0\u224a\0\u2283\0\u22bc\0\u22f5\0\u232e\0\u2367"+
    "\0\u23a0\0\u23d9\0\u2412\0\u244b\0\u2484\0\u24bd\0\u24f6\0\u252f"+
    "\0\u2568\0\u25a1\0\u25da\0\u2613\0\u264c\0\u2685\0\u26be\0\u26f7"+
    "\0\u2730\0\u2769\0\u27a2\0\u27db\0\u2814\0\u284d\0\u2886\0\u28bf"+
    "\0\u28f8\0\u2931\0\u296a\0\u29a3\0\u29dc\0\u2a15\0\u2a4e\0\u2a87"+
    "\0\u2ac0\0\u2af9\0\u2b32\0\u2b6b\0\u2ba4\0\u2bdd\0\u2c16\0\u2c4f"+
    "\0\u2c88\0\u2cc1\0\u2cfa\0\u2d33\0\u2d6c\0\u2da5\0\u2dde\0\u2e17"+
    "\0\u2e50\0\u2e89\0\71\0\u2ec2\0\71";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\6\1\0\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\0\1\30\1\31\1\32\1\5\1\33\1\11\1\34"+
    "\1\35\1\36\1\37\1\40\1\5\1\41\1\42\1\43"+
    "\1\44\1\0\1\5\1\45\1\46\1\47\1\45\1\50"+
    "\1\45\1\51\1\52\1\53\1\54\1\55\1\0\1\56"+
    "\1\57\73\0\1\3\72\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\7\5\1\0\3\5\6\0\6\5\1\0"+
    "\6\5\1\0\1\5\22\0\1\60\1\6\1\0\1\6"+
    "\1\61\1\60\1\0\7\60\1\0\3\60\1\62\2\0"+
    "\1\62\2\0\6\60\1\0\6\60\1\0\1\60\7\0"+
    "\3\62\3\0\1\63\4\0\1\60\1\64\1\0\1\64"+
    "\1\61\1\60\1\0\7\60\1\0\3\60\1\62\2\0"+
    "\1\62\2\0\6\60\1\0\6\60\1\0\1\60\7\0"+
    "\3\62\3\0\1\63\5\0\1\65\1\0\1\65\65\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\1\5\1\66"+
    "\5\5\1\0\3\5\6\0\4\5\1\67\1\5\1\0"+
    "\6\5\1\0\1\5\30\0\1\45\43\0\1\45\16\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\1\5\1\70"+
    "\2\5\1\71\2\5\1\0\3\5\6\0\6\5\1\0"+
    "\6\5\1\0\1\5\22\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\3\5\1\72\3\5\1\73\1\74\2\5"+
    "\6\0\6\5\1\0\6\5\1\0\1\5\22\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\3\5\1\75\3\5"+
    "\1\76\1\77\2\5\6\0\6\5\1\0\6\5\1\0"+
    "\1\5\22\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\4\5\1\100\2\5\1\0\3\5\6\0\6\5\1\0"+
    "\3\5\1\101\2\5\1\0\1\5\22\0\2\5\1\0"+
    "\1\5\1\0\1\102\1\0\7\5\1\0\3\5\6\0"+
    "\2\5\1\102\3\5\1\0\6\5\1\0\1\5\22\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\3\5\1\101"+
    "\1\103\2\5\1\0\3\5\6\0\1\104\5\5\1\0"+
    "\1\5\1\105\4\5\1\0\1\5\22\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\3\5\1\106\3\5\1\0"+
    "\3\5\6\0\6\5\1\0\6\5\1\0\1\5\32\0"+
    "\1\107\31\0\1\110\26\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\111\5\5\1\0\3\5\6\0"+
    "\6\5\1\0\3\5\1\101\2\5\1\0\1\5\22\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\1\112\6\5"+
    "\1\0\3\5\6\0\6\5\1\0\6\5\1\0\1\5"+
    "\22\0\2\5\1\0\1\5\1\0\1\5\1\0\3\5"+
    "\1\70\3\5\1\0\3\5\6\0\6\5\1\0\6\5"+
    "\1\0\1\5\22\0\1\60\1\113\1\0\1\113\1\0"+
    "\1\60\1\0\7\60\1\114\1\115\2\60\1\62\1\116"+
    "\1\0\1\62\2\0\6\60\1\0\6\60\1\0\1\60"+
    "\7\0\3\62\3\0\1\63\56\0\1\45\16\0\1\60"+
    "\1\113\1\0\1\113\1\0\1\60\1\0\7\60\1\114"+
    "\1\115\2\60\1\62\2\0\1\62\2\0\6\60\1\0"+
    "\6\60\1\0\1\60\7\0\3\62\3\0\1\63\30\31"+
    "\1\117\40\31\33\0\1\120\22\0\1\45\16\0\2\5"+
    "\1\0\1\5\1\0\1\121\1\0\3\5\1\122\3\5"+
    "\1\0\3\5\6\0\1\123\1\5\1\121\3\5\1\0"+
    "\6\5\1\0\1\5\22\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\3\5\1\124\3\5\1\0\3\5\6\0"+
    "\6\5\1\0\6\5\1\0\1\5\22\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\125\2\5\1\126\3\5"+
    "\1\0\3\5\6\0\6\5\1\0\6\5\1\0\1\5"+
    "\22\0\2\5\1\0\1\5\1\0\1\5\1\0\1\67"+
    "\2\5\1\127\3\5\1\0\3\5\6\0\6\5\1\0"+
    "\1\5\1\24\4\5\1\0\1\5\27\0\1\130\6\0"+
    "\1\131\15\0\1\130\5\0\1\132\30\0\2\5\1\0"+
    "\1\5\1\0\1\133\1\0\5\5\1\134\1\5\1\0"+
    "\3\5\6\0\2\5\1\133\3\5\1\0\1\5\1\135"+
    "\4\5\1\0\1\5\22\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\4\5\1\136\2\5\1\137\1\140\2\5"+
    "\6\0\6\5\1\0\1\5\1\141\4\5\1\0\1\5"+
    "\22\0\2\5\1\0\1\5\1\0\1\5\1\0\1\142"+
    "\2\5\1\143\3\5\1\144\1\145\2\5\6\0\6\5"+
    "\1\0\4\5\1\146\1\5\1\0\1\5\22\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\147\5\5"+
    "\1\0\3\5\6\0\6\5\1\0\6\5\1\0\1\5"+
    "\22\0\2\5\1\0\1\5\1\0\1\5\1\0\1\150"+
    "\3\5\1\151\2\5\1\0\3\5\6\0\6\5\1\0"+
    "\6\5\1\0\1\5\72\0\1\152\1\0\1\45\67\0"+
    "\1\51\1\45\67\0\2\45\1\51\15\0\1\60\1\153"+
    "\1\0\1\153\1\0\1\60\1\0\7\60\1\114\1\115"+
    "\2\60\1\62\2\0\1\62\2\0\6\60\1\0\6\60"+
    "\1\0\1\60\7\0\3\62\3\0\1\63\66\0\1\56"+
    "\2\0\3\154\1\155\64\154\1\156\4\0\1\60\4\0"+
    "\1\60\1\0\7\60\1\0\3\60\6\0\6\60\1\0"+
    "\6\60\1\0\1\60\23\0\1\157\1\0\1\160\1\0"+
    "\1\161\63\0\1\60\1\113\1\0\1\113\1\0\1\60"+
    "\1\0\7\60\1\0\3\60\1\62\2\0\1\62\2\0"+
    "\6\60\1\0\6\60\1\0\1\60\7\0\3\62\3\0"+
    "\71\63\1\62\4\0\1\60\1\64\1\0\1\64\1\162"+
    "\1\60\1\0\7\60\1\0\3\60\1\62\2\0\1\62"+
    "\2\0\6\60\1\0\6\60\1\0\1\60\7\0\3\62"+
    "\3\0\1\63\5\0\1\65\1\0\1\65\1\0\1\161"+
    "\63\0\2\5\1\0\1\5\1\0\1\5\1\0\2\5"+
    "\1\101\4\5\1\0\3\5\6\0\6\5\1\0\6\5"+
    "\1\0\1\5\22\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\7\5\1\0\3\5\6\0\6\5\1\163\1\164"+
    "\5\5\1\0\1\5\22\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\2\5\1\100\4\5\1\0\3\5\6\0"+
    "\6\5\1\0\6\5\1\0\1\5\22\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\165\2\5\1\0"+
    "\3\5\6\0\6\5\1\0\6\5\1\0\1\5\22\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\5\5\1\100"+
    "\1\5\1\0\3\5\6\0\6\5\1\0\6\5\1\0"+
    "\1\5\56\0\1\110\34\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\7\5\1\0\3\5\6\0\4\5\1\101"+
    "\1\5\1\0\6\5\1\0\1\5\22\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\7\5\1\0\3\5\6\0"+
    "\6\5\1\0\2\5\1\166\3\5\1\0\1\5\42\0"+
    "\1\167\50\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\7\5\1\0\1\5\1\100\1\5\6\0\6\5\1\0"+
    "\6\5\1\0\1\5\22\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\170\6\5\1\0\3\5\6\0\5\5"+
    "\1\171\1\0\5\5\1\172\1\0\1\5\22\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\7\5\1\0\3\5"+
    "\6\0\6\5\1\0\4\5\1\164\1\5\1\0\1\5"+
    "\22\0\2\5\1\0\1\5\1\0\1\5\1\0\7\5"+
    "\1\0\3\5\6\0\6\5\1\0\5\5\1\164\1\0"+
    "\1\5\22\0\2\5\1\0\1\5\1\0\1\173\1\0"+
    "\7\5\1\0\3\5\6\0\2\5\1\173\3\5\1\0"+
    "\6\5\1\0\1\5\22\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\4\5\1\100\2\5\1\0\3\5\6\0"+
    "\6\5\1\0\6\5\1\0\1\5\36\0\1\110\17\0"+
    "\1\174\34\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\5\5\1\101\1\5\1\0\3\5\6\0\4\5\1\175"+
    "\1\5\1\0\6\5\1\0\1\5\22\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\101\2\5\1\0"+
    "\3\5\6\0\6\5\1\0\6\5\1\0\1\5\22\0"+
    "\1\60\1\113\1\0\1\113\1\176\1\60\1\0\7\60"+
    "\1\0\3\60\1\62\2\0\1\62\2\0\6\60\1\0"+
    "\6\60\1\0\1\60\7\0\3\62\3\0\1\63\15\0"+
    "\1\177\57\0\1\60\4\0\1\60\1\0\2\60\1\200"+
    "\4\60\1\0\3\60\6\0\6\60\1\0\6\60\1\0"+
    "\1\60\16\0\27\116\1\201\1\202\1\203\37\116\2\120"+
    "\2\0\2\120\1\0\62\120\4\0\2\5\1\0\1\5"+
    "\1\0\1\5\1\0\7\5\1\0\3\5\6\0\3\5"+
    "\1\204\2\5\1\0\6\5\1\0\1\5\22\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\3\5\1\205\3\5"+
    "\1\0\3\5\6\0\6\5\1\0\6\5\1\0\1\5"+
    "\22\0\2\5\1\0\1\5\1\0\1\5\1\0\5\5"+
    "\1\164\1\5\1\0\3\5\6\0\6\5\1\0\6\5"+
    "\1\0\1\5\22\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\5\5\1\206\1\5\1\0\3\5\6\0\6\5"+
    "\1\0\6\5\1\0\1\5\22\0\2\5\1\0\1\5"+
    "\1\0\1\5\1\0\7\5\1\0\3\5\6\0\1\5"+
    "\1\207\4\5\1\0\6\5\1\0\1\5\22\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\210\5\5"+
    "\1\0\3\5\6\0\6\5\1\0\6\5\1\0\1\5"+
    "\22\0\2\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\211\5\5\1\0\3\5\6\0\6\5\1\0\6\5"+
    "\1\0\1\5\36\0\1\110\67\0\1\212\67\0\1\213"+
    "\56\0\2\5\1\0\1\5\1\0\1\5\1\0\5\5"+
    "\1\101\1\5\1\0\3\5\6\0\6\5\1\0\6\5"+
    "\1\0\1\5\22\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\4\5\1\214\2\5\1\0\3\5\6\0\6\5"+
    "\1\0\6\5\1\0\1\5\22\0\2\5\1\0\1\5"+
    "\1\0\1\5\1\0\3\5\1\215\3\5\1\0\3\5"+
    "\6\0\6\5\1\0\6\5\1\0\1\5\22\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\7\5\1\216\1\123"+
    "\2\5\6\0\6\5\1\0\6\5\1\0\1\5\36\0"+
    "\1\217\54\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\5\5\1\220\1\5\1\0\3\5\6\0\6\5\1\0"+
    "\6\5\1\0\1\5\22\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\7\5\1\144\1\145\2\5\6\0\6\5"+
    "\1\0\6\5\1\0\1\5\22\0\2\5\1\0\1\5"+
    "\1\0\1\5\1\0\7\5\1\0\3\5\6\0\4\5"+
    "\1\67\1\5\1\0\6\5\1\0\1\5\22\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\4\5\1\221\2\5"+
    "\1\0\3\5\6\0\6\5\1\0\6\5\1\0\1\5"+
    "\56\0\1\163\34\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\7\5\1\0\3\5\6\0\4\5\1\164\1\5"+
    "\1\0\6\5\1\0\1\5\22\0\2\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\222\5\5\1\0\3\5"+
    "\6\0\6\5\1\0\6\5\1\0\1\5\22\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\5\5\1\223\1\5"+
    "\1\0\3\5\6\0\6\5\1\0\6\5\1\0\1\5"+
    "\22\0\2\5\1\0\1\5\1\0\1\5\1\0\7\5"+
    "\1\0\3\5\6\0\5\5\1\224\1\0\6\5\1\0"+
    "\1\5\22\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\3\5\1\225\3\5\1\0\3\5\6\0\6\5\1\0"+
    "\6\5\1\0\1\5\72\0\1\152\20\0\1\60\1\153"+
    "\1\0\1\153\1\176\1\60\1\0\7\60\1\0\3\60"+
    "\1\62\2\0\1\62\2\0\6\60\1\0\6\60\1\0"+
    "\1\60\7\0\3\62\3\0\1\63\70\226\1\227\2\226"+
    "\1\154\65\226\1\227\4\0\1\60\1\230\1\0\1\230"+
    "\1\0\1\231\1\0\7\60\1\0\3\60\1\62\2\0"+
    "\1\62\2\0\6\60\1\0\6\60\1\0\1\60\7\0"+
    "\3\62\3\0\1\63\1\0\1\232\3\0\1\233\1\0"+
    "\1\233\2\0\1\232\41\0\1\232\21\0\1\157\1\0"+
    "\1\157\1\0\1\161\70\0\1\110\24\0\1\110\36\0"+
    "\2\5\1\0\1\5\1\0\1\101\1\0\7\5\1\0"+
    "\3\5\6\0\2\5\1\101\3\5\1\0\6\5\1\0"+
    "\1\5\22\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\234\6\5\1\0\3\5\6\0\6\5\1\0\6\5"+
    "\1\0\1\5\22\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\124\5\5\1\0\3\5\6\0\6\5"+
    "\1\0\6\5\1\0\1\5\22\0\2\5\1\0\1\5"+
    "\1\0\1\5\1\0\2\5\1\101\4\5\1\0\3\5"+
    "\6\0\4\5\1\101\1\5\1\0\6\5\1\0\1\5"+
    "\22\0\2\5\1\0\1\5\1\0\1\5\1\0\3\5"+
    "\1\235\3\5\1\0\3\5\6\0\6\5\1\0\6\5"+
    "\1\0\1\5\22\0\2\5\1\0\1\5\1\0\1\236"+
    "\1\0\7\5\1\0\3\5\6\0\2\5\1\236\3\5"+
    "\1\0\6\5\1\0\1\5\22\0\2\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\101\5\5\1\0\3\5"+
    "\6\0\6\5\1\0\6\5\1\0\1\5\40\0\2\237"+
    "\51\0\2\5\1\0\1\5\1\0\1\5\1\0\7\5"+
    "\1\237\1\240\2\5\6\0\6\5\1\0\6\5\1\0"+
    "\1\5\23\0\1\241\1\0\1\241\72\0\1\242\24\0"+
    "\1\242\36\0\1\60\4\0\1\243\1\0\7\60\1\0"+
    "\3\60\6\0\2\60\1\243\3\60\1\0\6\60\1\0"+
    "\1\60\16\0\27\203\1\201\1\0\1\244\37\203\27\202"+
    "\1\0\1\202\1\0\37\202\27\203\1\201\1\0\40\203"+
    "\4\0\2\5\1\0\1\5\1\0\1\5\1\0\7\5"+
    "\1\245\1\173\2\5\6\0\6\5\1\0\6\5\1\0"+
    "\1\5\22\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\7\5\1\0\3\5\6\0\4\5\1\246\1\5\1\0"+
    "\6\5\1\0\1\5\22\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\3\5\1\101\3\5\1\0\3\5\6\0"+
    "\6\5\1\0\6\5\1\0\1\5\22\0\2\5\1\0"+
    "\1\5\1\0\1\74\1\0\7\5\1\0\3\5\6\0"+
    "\2\5\1\74\3\5\1\0\6\5\1\0\1\5\22\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\7\5\1\0"+
    "\3\5\6\0\3\5\1\247\2\5\1\0\6\5\1\0"+
    "\1\5\22\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\7\5\1\0\3\5\6\0\6\5\1\130\1\133\5\5"+
    "\1\0\1\5\40\0\2\250\64\0\1\251\55\0\2\5"+
    "\1\0\1\5\1\0\1\5\1\0\7\5\1\250\1\252"+
    "\2\5\6\0\6\5\1\0\6\5\1\0\1\5\22\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\4\5\1\253"+
    "\2\5\1\0\3\5\6\0\6\5\1\0\6\5\1\0"+
    "\1\5\36\0\1\163\114\0\1\110\30\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\7\5\1\0\3\5\6\0"+
    "\6\5\1\0\1\5\1\101\4\5\1\0\1\5\22\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\7\5\1\0"+
    "\3\5\6\0\6\5\1\0\2\5\1\254\3\5\1\0"+
    "\1\5\22\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\7\5\1\0\3\5\6\0\5\5\1\255\1\0\6\5"+
    "\1\0\1\5\22\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\7\5\1\73\1\74\2\5\6\0\6\5\1\0"+
    "\6\5\1\0\1\5\22\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\7\5\1\0\3\5\6\0\6\5\1\0"+
    "\6\5\1\256\1\257\22\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\7\5\1\0\3\5\6\0\3\5\1\260"+
    "\1\5\1\261\1\0\6\5\1\0\1\5\16\0\70\226"+
    "\1\156\4\0\1\60\1\230\1\0\1\230\1\176\1\231"+
    "\1\0\7\60\1\0\3\60\1\62\2\0\1\62\2\0"+
    "\6\60\1\0\6\60\1\0\1\60\7\0\3\62\3\0"+
    "\1\63\1\0\1\262\2\0\1\60\1\263\1\0\1\263"+
    "\1\0\1\60\1\262\7\60\1\0\3\60\6\0\6\60"+
    "\1\0\6\60\1\0\1\60\1\0\1\262\21\0\1\233"+
    "\1\0\1\233\65\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\7\5\1\0\3\5\6\0\1\101\5\5\1\0"+
    "\6\5\1\0\1\5\22\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\4\5\1\66\2\5\1\0\3\5\6\0"+
    "\6\5\1\0\6\5\1\0\1\5\22\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\133\6\5\1\0\3\5"+
    "\6\0\6\5\1\0\6\5\1\0\1\5\32\0\1\163"+
    "\60\0\2\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\164\5\5\1\0\3\5\6\0\6\5\1\0\6\5"+
    "\1\0\1\5\22\0\1\60\1\264\1\0\1\264\1\0"+
    "\1\265\1\0\7\60\1\0\3\60\1\62\2\0\1\62"+
    "\2\0\6\60\1\0\6\60\1\0\1\60\7\0\3\62"+
    "\3\0\1\63\14\0\1\266\60\0\1\60\4\0\1\60"+
    "\1\0\1\60\1\267\5\60\1\0\3\60\6\0\6\60"+
    "\1\0\6\60\1\0\1\60\32\0\1\110\60\0\2\5"+
    "\1\0\1\5\1\0\1\270\1\0\7\5\1\0\3\5"+
    "\6\0\2\5\1\270\3\5\1\0\6\5\1\0\1\5"+
    "\22\0\2\5\1\0\1\5\1\0\1\5\1\0\7\5"+
    "\1\271\1\272\2\5\6\0\6\5\1\0\6\5\1\0"+
    "\1\5\32\0\1\273\74\0\1\274\54\0\2\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\275\5\5\1\0"+
    "\3\5\6\0\6\5\1\0\6\5\1\0\1\5\22\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\5\5\1\247"+
    "\1\5\1\0\3\5\6\0\6\5\1\0\6\5\1\0"+
    "\1\5\22\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\235\6\5\1\0\3\5\6\0\6\5\1\0\6\5"+
    "\1\0\1\5\22\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\5\5\1\276\1\5\1\0\3\5\6\0\6\5"+
    "\1\0\6\5\1\0\1\5\27\0\1\277\24\0\1\277"+
    "\36\0\2\5\1\0\1\5\1\0\1\66\1\0\7\5"+
    "\1\0\3\5\6\0\2\5\1\66\3\5\1\0\6\5"+
    "\1\0\1\5\22\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\4\5\1\300\2\5\1\0\3\5\6\0\6\5"+
    "\1\0\6\5\1\0\1\5\22\0\2\5\1\0\1\5"+
    "\1\0\1\301\1\0\7\5\1\0\3\5\6\0\2\5"+
    "\1\301\3\5\1\0\6\5\1\0\1\5\23\0\1\302"+
    "\1\0\1\302\65\0\1\60\1\303\1\0\1\303\1\304"+
    "\1\305\1\0\7\60\1\0\3\60\1\62\2\0\1\62"+
    "\2\0\6\60\1\0\6\60\1\0\1\60\7\0\3\62"+
    "\3\0\1\63\4\0\1\60\1\264\1\0\1\264\1\176"+
    "\1\265\1\0\7\60\1\0\3\60\1\62\2\0\1\62"+
    "\2\0\6\60\1\0\6\60\1\0\1\60\7\0\3\62"+
    "\3\0\1\63\1\0\1\306\2\0\1\60\1\307\1\0"+
    "\1\307\1\0\1\60\1\306\7\60\1\0\3\60\6\0"+
    "\6\60\1\0\6\60\1\0\1\60\1\0\1\306\62\0"+
    "\1\310\26\0\1\60\4\0\1\60\1\0\7\60\1\0"+
    "\3\60\6\0\6\60\1\0\3\60\1\311\2\60\1\0"+
    "\1\60\22\0\2\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\173\6\5\1\0\3\5\6\0\6\5\1\0\6\5"+
    "\1\0\1\5\32\0\1\130\60\0\2\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\133\5\5\1\0\3\5"+
    "\6\0\6\5\1\0\6\5\1\0\1\5\55\0\1\110"+
    "\53\0\2\271\51\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\7\5\1\0\3\5\6\0\3\5\1\101\2\5"+
    "\1\0\6\5\1\0\1\5\22\0\2\5\1\0\1\5"+
    "\1\0\1\5\1\0\7\5\1\312\1\313\2\5\6\0"+
    "\6\5\1\0\6\5\1\0\1\5\33\0\1\110\57\0"+
    "\2\5\1\0\1\5\1\0\1\5\1\0\1\314\6\5"+
    "\1\0\3\5\6\0\6\5\1\0\6\5\1\0\1\5"+
    "\22\0\2\5\1\0\1\5\1\0\1\5\1\0\2\5"+
    "\1\315\4\5\1\0\3\5\6\0\6\5\1\0\6\5"+
    "\1\0\1\5\22\0\1\60\1\303\1\0\1\303\1\0"+
    "\1\305\1\0\7\60\1\0\3\60\1\62\2\0\1\62"+
    "\2\0\6\60\1\0\6\60\1\0\1\60\7\0\3\62"+
    "\3\0\1\63\4\0\1\60\1\303\1\0\1\303\1\176"+
    "\1\305\1\0\7\60\1\0\3\60\1\62\2\0\1\62"+
    "\2\0\6\60\1\0\6\60\1\0\1\60\7\0\3\62"+
    "\3\0\1\63\32\0\1\316\37\0\1\317\2\0\1\60"+
    "\1\320\1\0\1\320\1\0\1\60\1\317\7\60\1\0"+
    "\3\60\6\0\6\60\1\0\6\60\1\0\1\60\1\0"+
    "\1\317\21\0\1\307\1\0\1\307\65\0\1\60\1\321"+
    "\1\0\1\321\1\0\1\322\1\0\7\60\1\0\3\60"+
    "\1\62\2\0\1\62\2\0\6\60\1\0\6\60\1\0"+
    "\1\60\7\0\3\62\3\0\1\63\22\0\2\323\51\0"+
    "\1\60\4\0\1\60\1\0\7\60\1\323\1\324\2\60"+
    "\6\0\6\60\1\0\6\60\1\0\1\60\34\0\1\245"+
    "\56\0\2\5\1\0\1\5\1\0\1\5\1\0\3\5"+
    "\1\173\3\5\1\0\3\5\6\0\6\5\1\0\6\5"+
    "\1\0\1\5\22\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\7\5\1\0\2\5\1\101\6\0\6\5\1\0"+
    "\6\5\1\0\1\5\22\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\7\5\1\0\3\5\6\0\6\5\1\0"+
    "\4\5\1\325\1\5\1\0\1\5\33\0\1\326\60\0"+
    "\1\327\1\0\1\327\65\0\1\60\1\330\1\0\1\330"+
    "\1\304\1\60\1\0\7\60\1\0\3\60\1\62\2\0"+
    "\1\62\2\0\6\60\1\0\6\60\1\0\1\60\7\0"+
    "\3\62\3\0\1\63\4\0\1\60\1\321\1\0\1\321"+
    "\1\176\1\322\1\0\7\60\1\0\3\60\1\62\2\0"+
    "\1\62\2\0\6\60\1\0\6\60\1\0\1\60\7\0"+
    "\3\62\3\0\1\63\1\0\1\331\2\0\1\60\1\62"+
    "\1\0\1\62\1\0\1\60\1\331\7\60\1\0\3\60"+
    "\6\0\6\60\1\0\6\60\1\0\1\60\1\0\1\331"+
    "\34\0\1\332\54\0\1\60\4\0\1\60\1\0\5\60"+
    "\1\333\1\60\1\0\3\60\6\0\6\60\1\0\6\60"+
    "\1\0\1\60\22\0\2\5\1\0\1\5\1\0\1\5"+
    "\1\0\4\5\1\164\2\5\1\0\3\5\6\0\6\5"+
    "\1\0\6\5\1\0\1\5\40\0\2\334\51\0\1\60"+
    "\1\330\1\0\1\330\1\0\1\60\1\0\7\60\1\0"+
    "\3\60\1\62\2\0\1\62\2\0\6\60\1\0\6\60"+
    "\1\0\1\60\7\0\3\62\3\0\1\63\4\0\1\60"+
    "\1\330\1\0\1\330\1\176\1\60\1\0\7\60\1\0"+
    "\3\60\1\62\2\0\1\62\2\0\6\60\1\0\6\60"+
    "\1\0\1\60\7\0\3\62\3\0\1\63\5\0\1\62"+
    "\1\0\1\62\103\0\2\335\51\0\1\60\4\0\1\60"+
    "\1\0\7\60\1\335\3\60\6\0\6\60\1\0\6\60"+
    "\1\0\1\60\55\0\1\336\77\0\1\337\44\0\2\340"+
    "\56\0\1\341\24\0\1\341\52\0\1\342\67\0\1\343"+
    "\101\0\1\344\120\0\1\345\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12027];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\16\1\1\0\14\1\1\0\5\1\1\11"+
    "\4\1\2\0\1\1\1\0\1\11\3\1\2\0\7\1"+
    "\1\0\2\1\1\0\11\1\1\11\2\1\2\0\2\1"+
    "\1\11\10\1\3\0\4\1\1\0\4\1\1\0\14\1"+
    "\1\0\1\1\1\0\3\1\1\11\4\1\1\0\1\1"+
    "\2\0\1\1\1\0\1\1\1\0\6\1\2\0\2\1"+
    "\2\0\12\1\1\0\4\1\1\0\1\1\2\0\2\1"+
    "\1\0\2\1\2\0\4\1\1\0\3\1\1\0\1\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\2\0\2\1"+
    "\1\0\4\1\1\0\1\1\3\0\1\1\1\0\3\1"+
    "\2\0\1\1\1\0\1\1\1\0\2\1\1\0\2\1"+
    "\2\0\1\1\7\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
 
 /* Cï¿½digo personalizado */
 
 // Se agregï¿½ una propiedad para verificar si existen tokens pendientes
 private boolean _existenTokens = false;
 
 public boolean existenTokens(){
 return this._existenTokens;
 }
 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ScannerABC(java.io.Reader in) {
   /* Cï¿½digo que se ejecutarï¿½ en el constructor de la clase */
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 258) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
     
 /* Cï¿½digo a ejecutar al finalizar el anï¿½lisis, en este caso cambiaremos el valor de una variable bandera */
 this._existenTokens = false;
 

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { // Ignorar cuando se ingrese un espacio
            }
          case 20: break;
          case 2: 
            { /*Token t = new Token("Enter", Types.IDENTIFIER);
 this._existenTokens = true;
 return t;*/
            }
          case 21: break;
          case 3: 
            { Token t = new Token(yytext(), Types.IDENTIFIER, yyline);
 this._existenTokens = true;
 return t;
            }
          case 22: break;
          case 4: 
            { Token t = new Token(yytext(), Types.ERROR_INTEGER, yyline);
 this._existenTokens = true;
 return t;
            }
          case 23: break;
          case 5: 
            { Token t = new Token(yytext(), Types.OPERATOR, yyline);
 this._existenTokens = true;
 return t;
            }
          case 24: break;
          case 6: 
            { Token t = new Token(yytext(), Types.ERROR_INVALID_CHARACTER, yyline);
 this._existenTokens = true;
 return t;
            }
          case 25: break;
          case 7: 
            { Token t = new Token(yytext(), Types.ERROR_COMMENT, yyline);
 this._existenTokens = true;
 return t;
            }
          case 26: break;
          case 8: 
            { Token t = new Token(yytext(), Types.ERROR_STRING, yyline);
 this._existenTokens = true;
 return t;
            }
          case 27: break;
          case 9: 
            { Token t = new Token(yytext(), Types.ERROR_IDENTIFIER, yyline);
 this._existenTokens = true;
 return t;
            }
          case 28: break;
          case 10: 
            { Token t = new Token(yytext(), Types.ERROR_FLOATING_POINT, yyline);
 this._existenTokens = true;
 return t;
            }
          case 29: break;
          case 11: 
            { Token t = new Token(yytext(), Types.RESERVED, yyline);
 this._existenTokens = true;
 return t;
            }
          case 30: break;
          case 12: 
            { Token t = new Token(yytext(), Types.LOGICAL_OPERATOR, yyline);
 this._existenTokens = true;
 return t;
            }
          case 31: break;
          case 13: 
            { // Comentario de bloque 1
            }
          case 32: break;
          case 14: 
            { Token t = new Token(yytext(), Types.NUMERIC_CHAR_LITERAL, yyline);
 this._existenTokens = true;
 return t;
            }
          case 33: break;
          case 15: 
            { Token t = new Token(yytext(), Types.STRING_LITERAL, yyline);
 this._existenTokens = true;
 return t;
            }
          case 34: break;
          case 16: 
            { Token t = new Token(yytext(), Types.FLOATING_POINT_NUMERIC_LITERAL, yyline);
 this._existenTokens = true;
 return t;
            }
          case 35: break;
          case 17: 
            { Token t = new Token(yytext(), Types.INTEGER_NUMERIC_LITERAL, yyline);
 this._existenTokens = true;
 return t;
            }
          case 36: break;
          case 18: 
            { Token t = new Token(yytext(), Types.CHAR_LITERAL, yyline);
 this._existenTokens = true;
 return t;
            }
          case 37: break;
          case 19: 
            { Token t = new Token(yytext(), Types.SCIENTIFIC_NOTATION_NUMERIC_LITERAL, yyline);
 this._existenTokens = true;
 return t;
            }
          case 38: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
