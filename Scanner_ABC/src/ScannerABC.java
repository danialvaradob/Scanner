/* The following code was generated by JFlex 1.6.1 */

/* Secciï¿½n de declaraciones de JFlex */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>D:/SegundoSemestre2018/Compiladores e Interpretes/Proyectos/Proyecto1/Scanner/Scanner_ABC/src/ScannerABC.flex</tt>
 */
public class ScannerABC {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\10\1\12\1\12\1\11\22\0\1\7\1\0\1\61"+
    "\1\0\4\0\1\31\1\33\1\3\1\4\1\54\1\5\1\14\1\6"+
    "\1\13\11\1\1\60\1\54\1\57\1\56\1\55\2\0\1\16\1\36"+
    "\1\42\1\20\1\15\1\47\1\40\1\45\1\26\1\2\1\53\1\41"+
    "\1\30\1\17\1\21\1\51\1\2\1\22\1\44\1\23\1\50\1\27"+
    "\1\46\1\24\1\35\1\2\1\54\1\0\1\54\1\0\1\2\1\0"+
    "\1\16\1\36\1\42\1\20\1\37\1\47\1\40\1\45\1\26\1\2"+
    "\1\53\1\41\1\30\1\17\1\21\1\51\1\2\1\22\1\44\1\23"+
    "\1\50\1\27\1\46\1\24\1\35\1\2\1\34\1\0\1\32\7\0"+
    "\1\12\252\0\2\25\115\0\1\43\u1ea8\0\1\12\1\12\u0100\0\1\52"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\4\3\1\4\2\5\1\1\1\6"+
    "\10\2\1\0\3\2\2\3\1\0\4\2\1\0\5\2"+
    "\2\3\1\7\1\10\1\6\1\3\1\11\1\1\5\2"+
    "\1\0\1\2\1\12\1\0\1\2\1\13\1\12\5\2"+
    "\3\12\1\2\1\0\1\11\7\2\3\0\4\2\1\0"+
    "\4\2\1\0\5\2\1\14\1\15\1\16\1\6\1\0"+
    "\3\2\1\13\4\2\1\0\1\2\1\0\6\2\2\0"+
    "\2\2\2\0\1\2\1\12\4\2\1\0\3\2\1\0"+
    "\1\2\1\11\1\0\2\2\2\0\4\2\1\0\3\2"+
    "\1\17\1\0\1\2\1\0\1\2\2\0\2\2\1\0"+
    "\2\2\1\0\4\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u015e\0\u0190\0\u01c2\0\u015e\0\u01f4\0\u0226\0\u0258\0\u028a"+
    "\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a"+
    "\0\u044c\0\u015e\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578"+
    "\0\u05aa\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6\0\u0708"+
    "\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898"+
    "\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6\0\144"+
    "\0\144\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u015e"+
    "\0\u0b54\0\u0b86\0\u0bb8\0\u015e\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80"+
    "\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10"+
    "\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0"+
    "\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a\0\u015e\0\u10cc\0\u10cc"+
    "\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6\0\u015e\0\u11f8\0\u122a"+
    "\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba"+
    "\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a"+
    "\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676\0\u16a8\0\u16da"+
    "\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u0bb8\0\u1806\0\u1838"+
    "\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932\0\u1964\0\u1996\0\u19c8"+
    "\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\u1a90\0\u1ac2\0\u1af4\0\u1b26"+
    "\0\u1b58\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20\0\u1c52\0\u1c84\0\u1cb6"+
    "\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\0\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\0\1\32\1\33\1\3\1\34\1\15"+
    "\1\35\1\36\1\37\1\40\1\41\1\3\1\42\1\43"+
    "\1\44\1\45\1\0\1\3\1\32\1\46\1\32\1\47"+
    "\1\4\1\50\1\0\1\2\1\51\10\0\1\2\1\52"+
    "\10\51\1\0\3\51\4\0\6\51\1\0\6\51\1\0"+
    "\1\51\7\0\2\3\10\0\1\3\1\0\10\3\1\0"+
    "\3\3\4\0\6\3\1\0\6\3\1\0\1\3\64\0"+
    "\1\32\7\0\1\53\51\0\1\32\10\0\1\32\50\0"+
    "\1\32\11\0\1\54\47\0\1\32\75\0\1\11\52\0"+
    "\1\55\1\51\10\0\1\55\1\52\10\51\1\0\3\51"+
    "\4\0\6\51\1\0\6\51\1\0\1\51\7\0\2\3"+
    "\10\0\1\3\1\0\2\3\1\56\5\3\1\0\3\3"+
    "\4\0\4\3\1\57\1\3\1\0\6\3\1\0\1\3"+
    "\7\0\2\3\10\0\1\3\1\0\2\3\1\60\2\3"+
    "\1\61\2\3\1\0\3\3\4\0\6\3\1\0\6\3"+
    "\1\0\1\3\7\0\2\3\10\0\1\3\1\0\4\3"+
    "\1\62\3\3\1\63\1\64\2\3\4\0\6\3\1\0"+
    "\6\3\1\0\1\3\7\0\2\3\10\0\1\3\1\0"+
    "\4\3\1\65\3\3\1\66\1\67\2\3\4\0\6\3"+
    "\1\0\6\3\1\0\1\3\7\0\2\3\10\0\1\3"+
    "\1\0\5\3\1\70\2\3\1\0\3\3\4\0\6\3"+
    "\1\0\3\3\1\71\2\3\1\0\1\3\7\0\2\3"+
    "\10\0\1\3\1\0\1\72\7\3\1\0\3\3\4\0"+
    "\2\3\1\72\3\3\1\0\6\3\1\0\1\3\7\0"+
    "\2\3\10\0\1\3\1\0\4\3\1\71\1\73\2\3"+
    "\1\0\3\3\4\0\1\74\5\3\1\0\1\3\1\75"+
    "\4\3\1\0\1\3\7\0\2\3\10\0\1\3\1\0"+
    "\4\3\1\76\3\3\1\0\3\3\4\0\6\3\1\0"+
    "\6\3\1\0\1\3\25\0\1\77\27\0\1\100\13\0"+
    "\2\3\10\0\1\3\1\0\2\3\1\101\5\3\1\0"+
    "\3\3\4\0\6\3\1\0\3\3\1\71\2\3\1\0"+
    "\1\3\7\0\2\3\10\0\1\3\1\0\1\3\1\102"+
    "\6\3\1\0\3\3\4\0\6\3\1\0\6\3\1\0"+
    "\1\3\7\0\2\3\10\0\1\3\1\0\4\3\1\60"+
    "\3\3\1\0\3\3\4\0\6\3\1\0\6\3\1\0"+
    "\1\3\11\0\1\103\56\0\32\33\1\104\27\33\1\0"+
    "\2\3\10\0\1\3\1\0\1\105\3\3\1\106\3\3"+
    "\1\0\3\3\4\0\1\107\1\3\1\105\3\3\1\0"+
    "\6\3\1\0\1\3\7\0\2\3\10\0\1\3\1\0"+
    "\4\3\1\110\3\3\1\0\3\3\4\0\6\3\1\0"+
    "\6\3\1\0\1\3\7\0\2\3\10\0\1\3\1\0"+
    "\1\3\1\111\2\3\1\112\3\3\1\0\3\3\4\0"+
    "\6\3\1\0\6\3\1\0\1\3\7\0\2\3\10\0"+
    "\1\3\1\0\1\3\1\57\2\3\1\113\3\3\1\0"+
    "\3\3\4\0\6\3\1\0\1\3\1\27\4\3\1\0"+
    "\1\3\23\0\1\114\5\0\1\115\13\0\1\114\5\0"+
    "\1\116\15\0\2\3\10\0\1\3\1\0\1\117\5\3"+
    "\1\120\1\3\1\0\3\3\4\0\2\3\1\117\3\3"+
    "\1\0\1\3\1\121\4\3\1\0\1\3\7\0\2\3"+
    "\10\0\1\3\1\0\5\3\1\122\2\3\1\123\1\124"+
    "\2\3\4\0\6\3\1\0\1\3\1\125\4\3\1\0"+
    "\1\3\7\0\2\3\10\0\1\3\1\0\1\3\1\126"+
    "\2\3\1\127\3\3\1\130\1\131\2\3\4\0\6\3"+
    "\1\0\4\3\1\132\1\3\1\0\1\3\7\0\2\3"+
    "\10\0\1\3\1\0\2\3\1\133\5\3\1\0\3\3"+
    "\4\0\6\3\1\0\6\3\1\0\1\3\7\0\2\3"+
    "\10\0\1\3\1\0\1\3\1\134\3\3\1\135\2\3"+
    "\1\0\3\3\4\0\6\3\1\0\6\3\1\0\1\3"+
    "\63\0\1\4\1\32\60\0\2\32\1\4\2\0\61\50"+
    "\1\136\2\0\1\51\12\0\10\51\1\0\3\51\4\0"+
    "\6\51\1\0\6\51\1\0\1\51\7\0\1\137\11\0"+
    "\1\140\52\0\1\53\55\0\10\54\3\0\47\54\1\0"+
    "\1\55\1\51\10\0\1\55\1\141\10\51\1\0\3\51"+
    "\4\0\6\51\1\0\6\51\1\0\1\51\7\0\2\3"+
    "\10\0\1\3\1\0\3\3\1\71\4\3\1\0\3\3"+
    "\4\0\6\3\1\0\6\3\1\0\1\3\7\0\2\3"+
    "\10\0\1\3\1\0\10\3\1\0\3\3\4\0\6\3"+
    "\1\142\1\143\5\3\1\0\1\3\7\0\2\3\10\0"+
    "\1\3\1\0\3\3\1\70\4\3\1\0\3\3\4\0"+
    "\6\3\1\0\6\3\1\0\1\3\7\0\2\3\10\0"+
    "\1\3\1\0\5\3\1\144\2\3\1\0\3\3\4\0"+
    "\6\3\1\0\6\3\1\0\1\3\7\0\2\3\10\0"+
    "\1\3\1\0\6\3\1\70\1\3\1\0\3\3\4\0"+
    "\6\3\1\0\6\3\1\0\1\3\47\0\1\100\21\0"+
    "\2\3\10\0\1\3\1\0\10\3\1\0\3\3\4\0"+
    "\4\3\1\71\1\3\1\0\6\3\1\0\1\3\7\0"+
    "\2\3\10\0\1\3\1\0\10\3\1\0\3\3\4\0"+
    "\6\3\1\0\2\3\1\145\3\3\1\0\1\3\35\0"+
    "\1\146\33\0\2\3\10\0\1\3\1\0\10\3\1\0"+
    "\1\3\1\70\1\3\4\0\6\3\1\0\6\3\1\0"+
    "\1\3\7\0\2\3\10\0\1\3\1\0\1\3\1\147"+
    "\6\3\1\0\3\3\4\0\5\3\1\150\1\0\5\3"+
    "\1\151\1\0\1\3\7\0\2\3\10\0\1\3\1\0"+
    "\10\3\1\0\3\3\4\0\6\3\1\0\4\3\1\143"+
    "\1\3\1\0\1\3\7\0\2\3\10\0\1\3\1\0"+
    "\10\3\1\0\3\3\4\0\6\3\1\0\5\3\1\143"+
    "\1\0\1\3\7\0\2\3\10\0\1\3\1\0\1\152"+
    "\7\3\1\0\3\3\4\0\2\3\1\152\3\3\1\0"+
    "\6\3\1\0\1\3\7\0\2\3\10\0\1\3\1\0"+
    "\5\3\1\70\2\3\1\0\3\3\4\0\6\3\1\0"+
    "\6\3\1\0\1\3\31\0\1\100\15\0\1\153\21\0"+
    "\2\3\10\0\1\3\1\0\6\3\1\71\1\3\1\0"+
    "\3\3\4\0\4\3\1\154\1\3\1\0\6\3\1\0"+
    "\1\3\7\0\2\3\10\0\1\3\1\0\5\3\1\71"+
    "\2\3\1\0\3\3\4\0\6\3\1\0\6\3\1\0"+
    "\1\3\6\0\3\103\1\155\26\103\1\0\27\103\1\0"+
    "\2\3\10\0\1\3\1\0\10\3\1\0\3\3\4\0"+
    "\3\3\1\156\2\3\1\0\6\3\1\0\1\3\7\0"+
    "\2\3\10\0\1\3\1\0\4\3\1\157\3\3\1\0"+
    "\3\3\4\0\6\3\1\0\6\3\1\0\1\3\7\0"+
    "\2\3\10\0\1\3\1\0\6\3\1\143\1\3\1\0"+
    "\3\3\4\0\6\3\1\0\6\3\1\0\1\3\7\0"+
    "\2\3\10\0\1\3\1\0\6\3\1\160\1\3\1\0"+
    "\3\3\4\0\6\3\1\0\6\3\1\0\1\3\7\0"+
    "\2\3\10\0\1\3\1\0\10\3\1\0\3\3\4\0"+
    "\1\3\1\161\4\3\1\0\6\3\1\0\1\3\7\0"+
    "\2\3\10\0\1\3\1\0\2\3\1\162\5\3\1\0"+
    "\3\3\4\0\6\3\1\0\6\3\1\0\1\3\7\0"+
    "\2\3\10\0\1\3\1\0\2\3\1\163\5\3\1\0"+
    "\3\3\4\0\6\3\1\0\6\3\1\0\1\3\31\0"+
    "\1\100\60\0\1\164\60\0\1\165\41\0\2\3\10\0"+
    "\1\3\1\0\6\3\1\71\1\3\1\0\3\3\4\0"+
    "\6\3\1\0\6\3\1\0\1\3\7\0\2\3\10\0"+
    "\1\3\1\0\5\3\1\166\2\3\1\0\3\3\4\0"+
    "\6\3\1\0\6\3\1\0\1\3\7\0\2\3\10\0"+
    "\1\3\1\0\4\3\1\167\3\3\1\0\3\3\4\0"+
    "\6\3\1\0\6\3\1\0\1\3\7\0\2\3\10\0"+
    "\1\3\1\0\10\3\1\170\1\107\2\3\4\0\6\3"+
    "\1\0\6\3\1\0\1\3\31\0\1\171\37\0\2\3"+
    "\10\0\1\3\1\0\6\3\1\172\1\3\1\0\3\3"+
    "\4\0\6\3\1\0\6\3\1\0\1\3\7\0\2\3"+
    "\10\0\1\3\1\0\10\3\1\130\1\131\2\3\4\0"+
    "\6\3\1\0\6\3\1\0\1\3\7\0\2\3\10\0"+
    "\1\3\1\0\10\3\1\0\3\3\4\0\4\3\1\57"+
    "\1\3\1\0\6\3\1\0\1\3\7\0\2\3\10\0"+
    "\1\3\1\0\5\3\1\173\2\3\1\0\3\3\4\0"+
    "\6\3\1\0\6\3\1\0\1\3\47\0\1\142\21\0"+
    "\2\3\10\0\1\3\1\0\10\3\1\0\3\3\4\0"+
    "\4\3\1\143\1\3\1\0\6\3\1\0\1\3\7\0"+
    "\2\3\10\0\1\3\1\0\2\3\1\174\5\3\1\0"+
    "\3\3\4\0\6\3\1\0\6\3\1\0\1\3\7\0"+
    "\2\3\10\0\1\3\1\0\6\3\1\175\1\3\1\0"+
    "\3\3\4\0\6\3\1\0\6\3\1\0\1\3\7\0"+
    "\2\3\10\0\1\3\1\0\10\3\1\0\3\3\4\0"+
    "\5\3\1\176\1\0\6\3\1\0\1\3\7\0\2\3"+
    "\10\0\1\3\1\0\4\3\1\177\3\3\1\0\3\3"+
    "\4\0\6\3\1\0\6\3\1\0\1\3\7\0\1\137"+
    "\11\0\1\137\1\0\1\200\45\0\1\137\11\0\1\137"+
    "\63\0\1\100\21\0\1\100\23\0\2\3\10\0\1\3"+
    "\1\0\1\71\7\3\1\0\3\3\4\0\2\3\1\71"+
    "\3\3\1\0\6\3\1\0\1\3\7\0\2\3\10\0"+
    "\1\3\1\0\1\3\1\201\6\3\1\0\3\3\4\0"+
    "\6\3\1\0\6\3\1\0\1\3\7\0\2\3\10\0"+
    "\1\3\1\0\2\3\1\110\5\3\1\0\3\3\4\0"+
    "\6\3\1\0\6\3\1\0\1\3\7\0\2\3\10\0"+
    "\1\3\1\0\3\3\1\71\4\3\1\0\3\3\4\0"+
    "\4\3\1\71\1\3\1\0\6\3\1\0\1\3\7\0"+
    "\2\3\10\0\1\3\1\0\4\3\1\202\3\3\1\0"+
    "\3\3\4\0\6\3\1\0\6\3\1\0\1\3\7\0"+
    "\2\3\10\0\1\3\1\0\1\203\7\3\1\0\3\3"+
    "\4\0\2\3\1\203\3\3\1\0\6\3\1\0\1\3"+
    "\7\0\2\3\10\0\1\3\1\0\2\3\1\71\5\3"+
    "\1\0\3\3\4\0\6\3\1\0\6\3\1\0\1\3"+
    "\33\0\2\204\34\0\2\3\10\0\1\3\1\0\10\3"+
    "\1\204\1\205\2\3\4\0\6\3\1\0\6\3\1\0"+
    "\1\3\6\0\3\103\1\155\26\103\1\0\1\206\26\103"+
    "\1\0\2\3\10\0\1\3\1\0\10\3\1\207\1\152"+
    "\2\3\4\0\6\3\1\0\6\3\1\0\1\3\7\0"+
    "\2\3\10\0\1\3\1\0\10\3\1\0\3\3\4\0"+
    "\4\3\1\210\1\3\1\0\6\3\1\0\1\3\7\0"+
    "\2\3\10\0\1\3\1\0\4\3\1\71\3\3\1\0"+
    "\3\3\4\0\6\3\1\0\6\3\1\0\1\3\7\0"+
    "\2\3\10\0\1\3\1\0\1\64\7\3\1\0\3\3"+
    "\4\0\2\3\1\64\3\3\1\0\6\3\1\0\1\3"+
    "\7\0\2\3\10\0\1\3\1\0\10\3\1\0\3\3"+
    "\4\0\3\3\1\211\2\3\1\0\6\3\1\0\1\3"+
    "\7\0\2\3\10\0\1\3\1\0\10\3\1\0\3\3"+
    "\4\0\6\3\1\114\1\117\5\3\1\0\1\3\33\0"+
    "\2\212\55\0\1\213\40\0\2\3\10\0\1\3\1\0"+
    "\10\3\1\212\1\214\2\3\4\0\6\3\1\0\6\3"+
    "\1\0\1\3\7\0\2\3\10\0\1\3\1\0\5\3"+
    "\1\215\2\3\1\0\3\3\4\0\6\3\1\0\6\3"+
    "\1\0\1\3\31\0\1\142\103\0\1\100\15\0\2\3"+
    "\10\0\1\3\1\0\10\3\1\0\3\3\4\0\6\3"+
    "\1\0\1\3\1\71\4\3\1\0\1\3\7\0\2\3"+
    "\10\0\1\3\1\0\10\3\1\0\3\3\4\0\6\3"+
    "\1\0\2\3\1\216\3\3\1\0\1\3\7\0\2\3"+
    "\10\0\1\3\1\0\10\3\1\0\3\3\4\0\5\3"+
    "\1\217\1\0\6\3\1\0\1\3\7\0\2\3\10\0"+
    "\1\3\1\0\10\3\1\63\1\64\2\3\4\0\6\3"+
    "\1\0\6\3\1\0\1\3\7\0\2\3\10\0\1\3"+
    "\1\0\10\3\1\0\3\3\4\0\6\3\1\0\6\3"+
    "\1\220\1\221\7\0\2\3\10\0\1\3\1\0\10\3"+
    "\1\0\3\3\4\0\3\3\1\222\1\3\1\223\1\0"+
    "\6\3\1\0\1\3\7\0\1\224\2\0\2\225\1\0"+
    "\1\225\3\0\1\224\47\0\2\3\10\0\1\3\1\0"+
    "\10\3\1\0\3\3\4\0\1\71\5\3\1\0\6\3"+
    "\1\0\1\3\7\0\2\3\10\0\1\3\1\0\5\3"+
    "\1\56\2\3\1\0\3\3\4\0\6\3\1\0\6\3"+
    "\1\0\1\3\7\0\2\3\10\0\1\3\1\0\1\3"+
    "\1\117\6\3\1\0\3\3\4\0\6\3\1\0\6\3"+
    "\1\0\1\3\25\0\1\142\43\0\2\3\10\0\1\3"+
    "\1\0\2\3\1\143\5\3\1\0\3\3\4\0\6\3"+
    "\1\0\6\3\1\0\1\3\25\0\1\100\43\0\2\3"+
    "\10\0\1\3\1\0\1\226\7\3\1\0\3\3\4\0"+
    "\2\3\1\226\3\3\1\0\6\3\1\0\1\3\7\0"+
    "\2\3\10\0\1\3\1\0\10\3\1\227\1\230\2\3"+
    "\4\0\6\3\1\0\6\3\1\0\1\3\25\0\1\231"+
    "\65\0\1\232\37\0\2\3\10\0\1\3\1\0\2\3"+
    "\1\233\5\3\1\0\3\3\4\0\6\3\1\0\6\3"+
    "\1\0\1\3\7\0\2\3\10\0\1\3\1\0\6\3"+
    "\1\211\1\3\1\0\3\3\4\0\6\3\1\0\6\3"+
    "\1\0\1\3\7\0\2\3\10\0\1\3\1\0\1\3"+
    "\1\202\6\3\1\0\3\3\4\0\6\3\1\0\6\3"+
    "\1\0\1\3\7\0\2\3\10\0\1\3\1\0\6\3"+
    "\1\234\1\3\1\0\3\3\4\0\6\3\1\0\6\3"+
    "\1\0\1\3\23\0\1\235\21\0\1\235\23\0\2\3"+
    "\10\0\1\3\1\0\1\56\7\3\1\0\3\3\4\0"+
    "\2\3\1\56\3\3\1\0\6\3\1\0\1\3\7\0"+
    "\2\3\10\0\1\3\1\0\5\3\1\236\2\3\1\0"+
    "\3\3\4\0\6\3\1\0\6\3\1\0\1\3\7\0"+
    "\2\3\10\0\1\3\1\0\1\237\7\3\1\0\3\3"+
    "\4\0\2\3\1\237\3\3\1\0\6\3\1\0\1\3"+
    "\7\0\1\224\11\0\1\224\47\0\2\3\10\0\1\3"+
    "\1\0\1\3\1\152\6\3\1\0\3\3\4\0\6\3"+
    "\1\0\6\3\1\0\1\3\25\0\1\114\43\0\2\3"+
    "\10\0\1\3\1\0\2\3\1\117\5\3\1\0\3\3"+
    "\4\0\6\3\1\0\6\3\1\0\1\3\46\0\1\100"+
    "\46\0\2\227\34\0\2\3\10\0\1\3\1\0\10\3"+
    "\1\0\3\3\4\0\3\3\1\71\2\3\1\0\6\3"+
    "\1\0\1\3\7\0\2\3\10\0\1\3\1\0\10\3"+
    "\1\240\1\241\2\3\4\0\6\3\1\0\6\3\1\0"+
    "\1\3\26\0\1\100\42\0\2\3\10\0\1\3\1\0"+
    "\1\3\1\242\6\3\1\0\3\3\4\0\6\3\1\0"+
    "\6\3\1\0\1\3\7\0\2\3\10\0\1\3\1\0"+
    "\3\3\1\243\4\3\1\0\3\3\4\0\6\3\1\0"+
    "\6\3\1\0\1\3\27\0\1\207\41\0\2\3\10\0"+
    "\1\3\1\0\4\3\1\152\3\3\1\0\3\3\4\0"+
    "\6\3\1\0\6\3\1\0\1\3\7\0\2\3\10\0"+
    "\1\3\1\0\10\3\1\0\2\3\1\71\4\0\6\3"+
    "\1\0\6\3\1\0\1\3\7\0\2\3\10\0\1\3"+
    "\1\0\10\3\1\0\3\3\4\0\6\3\1\0\4\3"+
    "\1\244\1\3\1\0\1\3\7\0\2\3\10\0\1\3"+
    "\1\0\5\3\1\143\2\3\1\0\3\3\4\0\6\3"+
    "\1\0\6\3\1\0\1\3\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7600];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\6\1\2\11\2\1\1\11\10\1\1\0\4\1"+
    "\1\11\1\0\4\1\1\0\22\1\1\0\2\1\1\0"+
    "\11\1\1\11\2\1\1\0\1\11\7\1\3\0\4\1"+
    "\1\0\4\1\1\0\5\1\1\11\3\1\1\0\3\1"+
    "\1\11\4\1\1\0\1\1\1\0\6\1\2\0\2\1"+
    "\2\0\6\1\1\0\3\1\1\0\2\1\1\0\2\1"+
    "\2\0\4\1\1\0\4\1\1\0\1\1\1\0\1\1"+
    "\2\0\2\1\1\0\2\1\1\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
 
 /* Cï¿½digo personalizado */
 
 // Se agregï¿½ una propiedad para verificar si existen tokens pendientes
 private boolean _existenTokens = false;
 
 public boolean existenTokens(){
 return this._existenTokens;
 }
 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ScannerABC(java.io.Reader in) {
   /* Cï¿½digo que se ejecutarï¿½ en el constructor de la clase */
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 234) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
     
 /* Cï¿½digo a ejecutar al finalizar el anï¿½lisis, en este caso cambiaremos el valor de una variable bandera */
 this._existenTokens = false;
 

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { Token t = new Token(yytext(), Types.ERROR_INTEGER);
 this._existenTokens = true;
 return t;
            }
          case 16: break;
          case 2: 
            { Token t = new Token(yytext(), Types.IDENTIFIER);
 this._existenTokens = true;
 return t;
            }
          case 17: break;
          case 3: 
            { Token t = new Token(yytext(), Types.OPERATOR);
 this._existenTokens = true;
 return t;
            }
          case 18: break;
          case 4: 
            { // Ignorar cuando se ingrese un espacio
            }
          case 19: break;
          case 5: 
            { /*Token t = new Token("Enter", Types.IDENTIFIER);
 this._existenTokens = true;
 return t;*/
            }
          case 20: break;
          case 6: 
            { Token t = new Token(yytext(), Types.ERROR_FLOATING_POINT);
 this._existenTokens = true;
 return t;
            }
          case 21: break;
          case 7: 
            { Token t = new Token(yytext(), Types.ERROR_STRING);
 this._existenTokens = true;
 return t;
            }
          case 22: break;
          case 8: 
            { Token t = new Token(yytext(), Types.ERROR_IDENTIFIER);
 this._existenTokens = true;
 return t;
            }
          case 23: break;
          case 9: 
            { // Comentario de bloque 1
            }
          case 24: break;
          case 10: 
            { Token t = new Token(yytext(), Types.RESERVED);
 this._existenTokens = true;
 return t;
            }
          case 25: break;
          case 11: 
            { Token t = new Token(yytext(), Types.LOGICAL_OPERATOR);
 this._existenTokens = true;
 return t;
            }
          case 26: break;
          case 12: 
            { Token t = new Token(yytext(), Types.STRING_LITERAL);
 this._existenTokens = true;
 return t;
            }
          case 27: break;
          case 13: 
            { Token t = new Token(yytext(), Types.FLOATING_POINT_NUMERIC_LITERAL);
 this._existenTokens = true;
 return t;
            }
          case 28: break;
          case 14: 
            { Token t = new Token(yytext(), Types.INTEGER_NUMERIC_LITERAL);
 this._existenTokens = true;
 return t;
            }
          case 29: break;
          case 15: 
            { Token t = new Token(yytext(), Types.SCIENTIFIC_NOTATION_NUMERIC_LITERAL);
 this._existenTokens = true;
 return t;
            }
          case 30: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
