/* The following code was generated by JFlex 1.6.1 */

/* Secciï¿½n de declaraciones de JFlex */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>D:/SegundoSemestre2018/Compiladores e Interpretes/Proyectos/Proyecto1/Scanner/Scanner_ABC/src/ScannerABC.flex</tt>
 */
public class ScannerABC {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\1\0\10\0\1\4\1\2\1\7\1\7\1\3\22\0\1\1\1\63"+
    "\1\70\1\63\1\63\1\63\1\63\1\0\1\27\1\32\1\30\1\55"+
    "\1\54\1\13\1\11\1\34\1\10\1\6\10\6\1\62\1\54\1\60"+
    "\1\57\1\56\1\0\1\63\1\14\1\36\1\42\1\16\1\12\1\47"+
    "\1\40\1\45\1\24\1\5\1\53\1\41\1\26\1\15\1\17\1\51"+
    "\1\5\1\20\1\44\1\21\1\50\1\25\1\46\1\22\1\35\1\5"+
    "\1\54\1\0\1\61\1\63\1\5\1\0\1\14\1\36\1\42\1\16"+
    "\1\37\1\47\1\40\1\45\1\24\1\5\1\53\1\41\1\26\1\15"+
    "\1\17\1\51\1\5\1\20\1\44\1\21\1\50\1\25\1\46\1\22"+
    "\1\35\1\5\1\33\1\4\1\31\7\0\1\7\33\0\1\67\30\0"+
    "\1\65\4\0\1\65\2\0\1\64\1\66\36\0\1\64\1\66\114\0"+
    "\2\23\115\0\1\43\u1ea8\0\1\7\1\7\u0100\0\1\52\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\1\2\3\1\4\2\5\1\6\1\4"+
    "\1\6\7\4\1\2\3\4\3\2\1\7\1\6\4\4"+
    "\1\2\5\4\5\6\2\2\1\10\1\4\1\2\2\0"+
    "\1\11\1\12\4\0\1\5\1\12\5\4\1\0\1\4"+
    "\1\13\1\0\1\4\1\14\1\13\5\4\3\13\1\4"+
    "\2\2\1\0\2\2\1\7\2\0\2\15\7\4\3\0"+
    "\4\4\1\0\4\4\1\0\5\4\1\6\2\10\1\16"+
    "\1\17\1\20\2\0\1\12\1\0\3\4\1\14\4\4"+
    "\1\0\1\4\2\0\1\2\2\7\1\2\4\7\6\4"+
    "\2\0\2\4\2\0\1\4\1\13\4\4\1\10\1\21"+
    "\1\17\1\11\1\0\1\17\3\4\1\0\1\4\2\0"+
    "\1\2\2\0\2\7\2\0\2\7\2\2\4\0\1\7"+
    "\1\0\2\4\2\0\4\4\1\0\3\4\1\0\1\22"+
    "\1\0\1\11\1\0\1\2\1\15\1\7\1\11\1\0"+
    "\1\15\3\0\1\15\1\7\1\4\1\0\1\4\2\0"+
    "\2\4\1\0\2\4\2\22\1\0\1\11\3\0\1\2"+
    "\2\7\1\0\3\7\1\0\3\4\2\0\1\22\1\0"+
    "\1\11\1\0\1\2\2\7\1\0\1\11\1\7\1\4"+
    "\1\0\2\22\2\0\1\2\2\7\2\0\1\7\2\0"+
    "\1\7\1\0\1\11\2\7\3\0\2\7\2\0\2\7"+
    "\1\0\1\11\1\7\1\0\1\12";

  private static int [] zzUnpackAction() {
    int [] result = new int[292];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\71\0\253\0\344\0\u011d\0\u0156"+
    "\0\u018f\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e"+
    "\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6"+
    "\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675\0\u06ae"+
    "\0\u06e7\0\u0720\0\u0759\0\u0792\0\u07cb\0\71\0\u0804\0\u083d"+
    "\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0a05"+
    "\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd"+
    "\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95"+
    "\0\u0dce\0\u0e07\0\u0e40\0\344\0\344\0\u0e79\0\u0eb2\0\u0eeb"+
    "\0\u0f24\0\u0f5d\0\u0f96\0\71\0\u0fcf\0\u1008\0\u1041\0\u107a"+
    "\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\71\0\u1209"+
    "\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398\0\u13d1"+
    "\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599"+
    "\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6\0\u16ef\0\u1728\0\u1761"+
    "\0\u179a\0\u17d3\0\u180c\0\u1845\0\u0ae9\0\u187e\0\u187e\0\u18b7"+
    "\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d\0\71\0\u1a46"+
    "\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e"+
    "\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6"+
    "\0\u1e0f\0\u1e48\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e"+
    "\0\u1fd7\0\u2010\0\u2049\0\u2082\0\u20bb\0\u20f4\0\u212d\0\u2166"+
    "\0\u219f\0\u21d8\0\u0ae9\0\u2211\0\u224a\0\u2283\0\u2283\0\u22bc"+
    "\0\u22f5\0\u232e\0\u2367\0\u23a0\0\u23d9\0\u2412\0\u244b\0\u2484"+
    "\0\u24bd\0\u24f6\0\u252f\0\u2568\0\u25a1\0\u25da\0\u2613\0\u264c"+
    "\0\u2685\0\u26be\0\u26f7\0\u2730\0\u2769\0\u27a2\0\u27db\0\u2814"+
    "\0\u284d\0\u2886\0\u28bf\0\u28f8\0\u2931\0\u296a\0\u29a3\0\u29dc"+
    "\0\u2a15\0\u2a4e\0\u2a87\0\u2ac0\0\u2af9\0\u2b32\0\u2b6b\0\u2ba4"+
    "\0\u2bdd\0\u24bd\0\u2c16\0\u2c4f\0\u2c88\0\u25a1\0\u2cc1\0\u2cfa"+
    "\0\u2d33\0\u2730\0\u2d6c\0\u2da5\0\u2dde\0\u2e17\0\u2e50\0\u2e89"+
    "\0\u2ec2\0\u2efb\0\u2f34\0\u2f6d\0\u2fa6\0\u2fdf\0\u3018\0\u3051"+
    "\0\u308a\0\u30c3\0\u30fc\0\u3135\0\u316e\0\u31a7\0\u31e0\0\u3219"+
    "\0\u3252\0\u328b\0\u32c4\0\u32fd\0\u3336\0\u336f\0\u33a8\0\u33e1"+
    "\0\u341a\0\u3453\0\u348c\0\u34c5\0\u34fe\0\u3537\0\u3570\0\u35a9"+
    "\0\u35e2\0\u361b\0\u3654\0\u368d\0\u36c6\0\u36ff\0\u3738\0\u3771"+
    "\0\u37aa\0\u37e3\0\u381c\0\u3855\0\u388e\0\u38c7\0\u3900\0\u3939"+
    "\0\u3972\0\u39ab\0\u39e4\0\u3a1d\0\u3a56\0\u3a8f\0\u3ac8\0\u3b01"+
    "\0\u3b3a\0\u3b73\0\u3bac\0\u3be5\0\u3c1e\0\u3c57\0\u3c90\0\u3cc9"+
    "\0\71\0\u3d02\0\u3d3b\0\71";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[292];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\3\1\6\1\7\1\0"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\2\1\31\1\32\1\33\1\6\1\34\1\12"+
    "\1\35\1\36\1\37\1\40\1\41\1\6\1\42\1\43"+
    "\1\44\1\45\1\2\1\6\1\46\1\47\1\50\1\46"+
    "\1\51\1\46\1\52\1\31\1\53\1\2\1\54\1\2"+
    "\1\55\72\0\1\3\2\0\1\3\66\0\1\4\73\0"+
    "\1\6\1\56\1\0\1\56\1\0\1\6\1\0\7\6"+
    "\1\0\3\6\2\57\1\0\1\57\2\0\6\6\1\0"+
    "\6\6\1\0\1\6\7\0\1\57\1\60\1\0\1\61"+
    "\7\0\1\62\1\7\1\0\1\7\1\63\1\62\1\0"+
    "\7\62\1\0\3\62\2\64\1\0\1\64\2\0\6\62"+
    "\1\0\6\62\1\0\1\62\7\0\1\64\1\65\1\0"+
    "\1\66\1\0\1\67\5\0\1\62\1\70\1\0\1\70"+
    "\1\63\1\62\1\0\7\62\1\0\3\62\2\64\1\0"+
    "\1\64\2\0\6\62\1\0\6\62\1\0\1\62\7\0"+
    "\1\64\1\65\1\0\1\66\1\0\1\67\6\0\1\71"+
    "\1\0\1\71\65\0\1\6\1\56\1\0\1\56\1\0"+
    "\1\6\1\0\1\6\1\72\5\6\1\0\3\6\2\57"+
    "\1\0\1\57\2\0\4\6\1\73\1\6\1\0\6\6"+
    "\1\0\1\6\7\0\1\57\1\60\1\0\1\61\15\0"+
    "\1\46\43\0\1\46\16\0\1\6\1\56\1\0\1\56"+
    "\1\0\1\6\1\0\1\6\1\74\2\6\1\75\2\6"+
    "\1\0\3\6\2\57\1\0\1\57\2\0\6\6\1\0"+
    "\6\6\1\0\1\6\7\0\1\57\1\60\1\0\1\61"+
    "\7\0\1\6\1\56\1\0\1\56\1\0\1\6\1\0"+
    "\3\6\1\76\3\6\1\77\1\100\2\6\2\57\1\0"+
    "\1\57\2\0\6\6\1\0\6\6\1\0\1\6\7\0"+
    "\1\57\1\60\1\0\1\61\7\0\1\6\1\56\1\0"+
    "\1\56\1\0\1\6\1\0\3\6\1\101\3\6\1\102"+
    "\1\103\2\6\2\57\1\0\1\57\2\0\6\6\1\0"+
    "\6\6\1\0\1\6\7\0\1\57\1\60\1\0\1\61"+
    "\7\0\1\6\1\56\1\0\1\56\1\0\1\6\1\0"+
    "\4\6\1\104\2\6\1\0\3\6\2\57\1\0\1\57"+
    "\2\0\6\6\1\0\3\6\1\105\2\6\1\0\1\6"+
    "\7\0\1\57\1\60\1\0\1\61\7\0\1\6\1\56"+
    "\1\0\1\56\1\0\1\106\1\0\7\6\1\0\3\6"+
    "\2\57\1\0\1\57\2\0\2\6\1\106\3\6\1\0"+
    "\6\6\1\0\1\6\7\0\1\57\1\60\1\0\1\61"+
    "\7\0\1\6\1\56\1\0\1\56\1\0\1\6\1\0"+
    "\3\6\1\105\1\107\2\6\1\0\3\6\2\57\1\0"+
    "\1\57\2\0\1\110\5\6\1\0\1\6\1\111\4\6"+
    "\1\0\1\6\7\0\1\57\1\60\1\0\1\61\7\0"+
    "\1\6\1\56\1\0\1\56\1\0\1\6\1\0\3\6"+
    "\1\112\3\6\1\0\3\6\2\57\1\0\1\57\2\0"+
    "\6\6\1\0\6\6\1\0\1\6\7\0\1\57\1\60"+
    "\1\0\1\61\17\0\1\113\31\0\1\114\26\0\1\6"+
    "\1\56\1\0\1\56\1\0\1\6\1\0\1\6\1\115"+
    "\5\6\1\0\3\6\2\57\1\0\1\57\2\0\6\6"+
    "\1\0\3\6\1\105\2\6\1\0\1\6\7\0\1\57"+
    "\1\60\1\0\1\61\7\0\1\6\1\56\1\0\1\56"+
    "\1\0\1\6\1\0\1\116\6\6\1\0\3\6\2\57"+
    "\1\0\1\57\2\0\6\6\1\0\6\6\1\0\1\6"+
    "\7\0\1\57\1\60\1\0\1\61\7\0\1\6\1\56"+
    "\1\0\1\56\1\0\1\6\1\0\3\6\1\74\3\6"+
    "\1\0\3\6\2\57\1\0\1\57\2\0\6\6\1\0"+
    "\6\6\1\0\1\6\7\0\1\57\1\60\1\0\1\61"+
    "\7\0\1\117\1\120\1\0\1\120\1\0\1\117\1\0"+
    "\7\117\1\121\1\122\2\117\1\123\1\124\1\0\1\123"+
    "\2\0\6\117\1\0\6\117\1\0\1\117\7\0\1\123"+
    "\1\125\1\0\1\126\1\0\1\67\5\0\1\117\1\120"+
    "\1\0\1\120\1\0\1\117\1\0\7\117\1\121\1\122"+
    "\2\117\2\123\1\0\1\123\2\0\6\117\1\0\6\117"+
    "\1\0\1\117\3\0\1\46\3\0\1\123\1\125\1\0"+
    "\1\126\1\0\1\67\5\0\1\117\1\120\1\0\1\120"+
    "\1\0\1\117\1\0\7\117\1\121\1\122\2\117\2\123"+
    "\1\0\1\123\2\0\6\117\1\0\6\117\1\0\1\117"+
    "\7\0\1\123\1\125\1\0\1\126\1\0\1\67\31\32"+
    "\1\127\37\32\34\0\1\130\22\0\1\46\16\0\1\6"+
    "\1\56\1\0\1\56\1\0\1\131\1\0\3\6\1\132"+
    "\3\6\1\0\3\6\2\57\1\0\1\57\2\0\1\133"+
    "\1\6\1\131\3\6\1\0\6\6\1\0\1\6\7\0"+
    "\1\57\1\60\1\0\1\61\7\0\1\6\1\56\1\0"+
    "\1\56\1\0\1\6\1\0\3\6\1\134\3\6\1\0"+
    "\3\6\2\57\1\0\1\57\2\0\6\6\1\0\6\6"+
    "\1\0\1\6\7\0\1\57\1\60\1\0\1\61\7\0"+
    "\1\6\1\56\1\0\1\56\1\0\1\6\1\0\1\135"+
    "\2\6\1\136\3\6\1\0\3\6\2\57\1\0\1\57"+
    "\2\0\6\6\1\0\6\6\1\0\1\6\7\0\1\57"+
    "\1\60\1\0\1\61\7\0\1\6\1\56\1\0\1\56"+
    "\1\0\1\6\1\0\1\73\2\6\1\137\3\6\1\0"+
    "\3\6\2\57\1\0\1\57\2\0\6\6\1\0\1\6"+
    "\1\25\4\6\1\0\1\6\7\0\1\57\1\60\1\0"+
    "\1\61\14\0\1\140\6\0\1\141\15\0\1\140\5\0"+
    "\1\142\30\0\1\6\1\56\1\0\1\56\1\0\1\143"+
    "\1\0\5\6\1\144\1\6\1\0\3\6\2\57\1\0"+
    "\1\57\2\0\2\6\1\143\3\6\1\0\1\6\1\145"+
    "\4\6\1\0\1\6\7\0\1\57\1\60\1\0\1\61"+
    "\7\0\1\6\1\56\1\0\1\56\1\0\1\6\1\0"+
    "\4\6\1\146\2\6\1\147\1\150\2\6\2\57\1\0"+
    "\1\57\2\0\6\6\1\0\1\6\1\151\4\6\1\0"+
    "\1\6\7\0\1\57\1\60\1\0\1\61\7\0\1\6"+
    "\1\56\1\0\1\56\1\0\1\6\1\0\1\152\2\6"+
    "\1\153\3\6\1\154\1\155\2\6\2\57\1\0\1\57"+
    "\2\0\6\6\1\0\4\6\1\156\1\6\1\0\1\6"+
    "\7\0\1\57\1\60\1\0\1\61\7\0\1\6\1\56"+
    "\1\0\1\56\1\0\1\6\1\0\1\6\1\157\5\6"+
    "\1\0\3\6\2\57\1\0\1\57\2\0\6\6\1\0"+
    "\6\6\1\0\1\6\7\0\1\57\1\60\1\0\1\61"+
    "\7\0\1\6\1\56\1\0\1\56\1\0\1\6\1\0"+
    "\1\160\3\6\1\161\2\6\1\0\3\6\2\57\1\0"+
    "\1\57\2\0\6\6\1\0\6\6\1\0\1\6\7\0"+
    "\1\57\1\60\1\0\1\61\57\0\1\162\1\0\1\46"+
    "\67\0\1\52\1\46\67\0\2\46\1\52\67\0\1\46"+
    "\76\0\1\31\1\0\1\31\70\0\1\31\1\0\3\163"+
    "\1\164\64\163\1\165\5\0\2\56\1\0\1\56\1\0"+
    "\1\56\1\0\7\56\1\0\3\56\6\0\6\56\1\0"+
    "\6\56\1\0\1\56\22\0\2\117\1\0\1\117\1\0"+
    "\1\117\1\0\7\117\1\0\3\117\2\57\1\0\1\57"+
    "\2\0\6\117\1\0\6\117\1\0\1\117\7\0\1\57"+
    "\1\60\1\0\1\61\67\0\1\57\1\0\1\57\70\0"+
    "\1\57\6\0\1\62\4\0\1\62\1\0\7\62\1\0"+
    "\3\62\6\0\6\62\1\0\6\62\1\0\1\62\23\0"+
    "\1\166\1\0\1\167\1\0\1\170\63\0\1\62\1\171"+
    "\1\0\1\171\1\0\1\62\1\0\7\62\1\0\3\62"+
    "\2\64\1\0\1\64\2\0\6\62\1\0\6\62\1\0"+
    "\1\62\7\0\1\64\1\65\1\0\1\66\1\0\1\67"+
    "\65\0\1\64\1\0\1\64\70\0\1\64\1\0\70\67"+
    "\1\64\5\0\1\62\1\70\1\0\1\70\1\172\1\62"+
    "\1\0\7\62\1\0\3\62\2\64\1\0\1\64\2\0"+
    "\6\62\1\0\6\62\1\0\1\62\7\0\1\64\1\65"+
    "\1\0\1\66\1\0\1\67\6\0\1\71\1\0\1\71"+
    "\1\0\1\170\63\0\1\6\1\56\1\0\1\56\1\0"+
    "\1\6\1\0\2\6\1\105\4\6\1\0\3\6\2\57"+
    "\1\0\1\57\2\0\6\6\1\0\6\6\1\0\1\6"+
    "\7\0\1\57\1\60\1\0\1\61\7\0\1\6\1\56"+
    "\1\0\1\56\1\0\1\6\1\0\7\6\1\0\3\6"+
    "\2\57\1\0\1\57\2\0\6\6\1\173\1\174\5\6"+
    "\1\0\1\6\7\0\1\57\1\60\1\0\1\61\7\0"+
    "\1\6\1\56\1\0\1\56\1\0\1\6\1\0\2\6"+
    "\1\104\4\6\1\0\3\6\2\57\1\0\1\57\2\0"+
    "\6\6\1\0\6\6\1\0\1\6\7\0\1\57\1\60"+
    "\1\0\1\61\7\0\1\6\1\56\1\0\1\56\1\0"+
    "\1\6\1\0\4\6\1\175\2\6\1\0\3\6\2\57"+
    "\1\0\1\57\2\0\6\6\1\0\6\6\1\0\1\6"+
    "\7\0\1\57\1\60\1\0\1\61\7\0\1\6\1\56"+
    "\1\0\1\56\1\0\1\6\1\0\5\6\1\104\1\6"+
    "\1\0\3\6\2\57\1\0\1\57\2\0\6\6\1\0"+
    "\6\6\1\0\1\6\7\0\1\57\1\60\1\0\1\61"+
    "\43\0\1\114\34\0\1\6\1\56\1\0\1\56\1\0"+
    "\1\6\1\0\7\6\1\0\3\6\2\57\1\0\1\57"+
    "\2\0\4\6\1\105\1\6\1\0\6\6\1\0\1\6"+
    "\7\0\1\57\1\60\1\0\1\61\7\0\1\6\1\56"+
    "\1\0\1\56\1\0\1\6\1\0\7\6\1\0\3\6"+
    "\2\57\1\0\1\57\2\0\6\6\1\0\2\6\1\176"+
    "\3\6\1\0\1\6\7\0\1\57\1\60\1\0\1\61"+
    "\27\0\1\177\50\0\1\6\1\56\1\0\1\56\1\0"+
    "\1\6\1\0\7\6\1\0\1\6\1\104\1\6\2\57"+
    "\1\0\1\57\2\0\6\6\1\0\6\6\1\0\1\6"+
    "\7\0\1\57\1\60\1\0\1\61\7\0\1\6\1\56"+
    "\1\0\1\56\1\0\1\6\1\0\1\200\6\6\1\0"+
    "\3\6\2\57\1\0\1\57\2\0\5\6\1\201\1\0"+
    "\5\6\1\202\1\0\1\6\7\0\1\57\1\60\1\0"+
    "\1\61\7\0\1\6\1\56\1\0\1\56\1\0\1\6"+
    "\1\0\7\6\1\0\3\6\2\57\1\0\1\57\2\0"+
    "\6\6\1\0\4\6\1\174\1\6\1\0\1\6\7\0"+
    "\1\57\1\60\1\0\1\61\7\0\1\6\1\56\1\0"+
    "\1\56\1\0\1\6\1\0\7\6\1\0\3\6\2\57"+
    "\1\0\1\57\2\0\6\6\1\0\5\6\1\174\1\0"+
    "\1\6\7\0\1\57\1\60\1\0\1\61\7\0\1\6"+
    "\1\56\1\0\1\56\1\0\1\203\1\0\7\6\1\0"+
    "\3\6\2\57\1\0\1\57\2\0\2\6\1\203\3\6"+
    "\1\0\6\6\1\0\1\6\7\0\1\57\1\60\1\0"+
    "\1\61\7\0\1\6\1\56\1\0\1\56\1\0\1\6"+
    "\1\0\4\6\1\104\2\6\1\0\3\6\2\57\1\0"+
    "\1\57\2\0\6\6\1\0\6\6\1\0\1\6\7\0"+
    "\1\57\1\60\1\0\1\61\23\0\1\114\17\0\1\204"+
    "\34\0\1\6\1\56\1\0\1\56\1\0\1\6\1\0"+
    "\5\6\1\105\1\6\1\0\3\6\2\57\1\0\1\57"+
    "\2\0\4\6\1\205\1\6\1\0\6\6\1\0\1\6"+
    "\7\0\1\57\1\60\1\0\1\61\7\0\1\6\1\56"+
    "\1\0\1\56\1\0\1\6\1\0\4\6\1\105\2\6"+
    "\1\0\3\6\2\57\1\0\1\57\2\0\6\6\1\0"+
    "\6\6\1\0\1\6\7\0\1\57\1\60\1\0\1\61"+
    "\7\0\2\117\1\0\1\117\1\0\1\117\1\0\7\117"+
    "\1\0\3\117\6\0\6\117\1\0\6\117\1\0\1\117"+
    "\22\0\1\117\1\120\1\0\1\120\1\206\1\117\1\0"+
    "\7\117\1\0\3\117\2\64\1\0\1\64\2\0\6\117"+
    "\1\0\6\117\1\0\1\117\7\0\1\64\1\65\1\0"+
    "\1\66\1\0\1\67\16\0\1\207\57\0\2\117\1\0"+
    "\1\117\1\0\1\117\1\0\2\117\1\210\4\117\1\0"+
    "\3\117\6\0\6\117\1\0\6\117\1\0\1\117\22\0"+
    "\1\117\1\120\1\0\1\120\1\0\1\117\1\0\7\117"+
    "\1\0\3\117\2\123\1\0\1\123\2\0\6\117\1\0"+
    "\6\117\1\0\1\117\7\0\1\123\1\125\1\0\1\126"+
    "\1\0\1\67\6\211\1\212\1\211\1\212\16\211\1\124"+
    "\1\213\1\214\1\213\30\211\1\124\1\215\1\211\1\216"+
    "\1\211\1\217\65\0\1\123\1\0\1\123\70\0\1\123"+
    "\1\0\2\130\2\0\3\130\1\0\61\130\5\0\1\6"+
    "\1\56\1\0\1\56\1\0\1\6\1\0\7\6\1\0"+
    "\3\6\2\57\1\0\1\57\2\0\3\6\1\220\2\6"+
    "\1\0\6\6\1\0\1\6\7\0\1\57\1\60\1\0"+
    "\1\61\7\0\1\6\1\56\1\0\1\56\1\0\1\6"+
    "\1\0\3\6\1\221\3\6\1\0\3\6\2\57\1\0"+
    "\1\57\2\0\6\6\1\0\6\6\1\0\1\6\7\0"+
    "\1\57\1\60\1\0\1\61\7\0\1\6\1\56\1\0"+
    "\1\56\1\0\1\6\1\0\5\6\1\174\1\6\1\0"+
    "\3\6\2\57\1\0\1\57\2\0\6\6\1\0\6\6"+
    "\1\0\1\6\7\0\1\57\1\60\1\0\1\61\7\0"+
    "\1\6\1\56\1\0\1\56\1\0\1\6\1\0\5\6"+
    "\1\222\1\6\1\0\3\6\2\57\1\0\1\57\2\0"+
    "\6\6\1\0\6\6\1\0\1\6\7\0\1\57\1\60"+
    "\1\0\1\61\7\0\1\6\1\56\1\0\1\56\1\0"+
    "\1\6\1\0\7\6\1\0\3\6\2\57\1\0\1\57"+
    "\2\0\1\6\1\223\4\6\1\0\6\6\1\0\1\6"+
    "\7\0\1\57\1\60\1\0\1\61\7\0\1\6\1\56"+
    "\1\0\1\56\1\0\1\6\1\0\1\6\1\224\5\6"+
    "\1\0\3\6\2\57\1\0\1\57\2\0\6\6\1\0"+
    "\6\6\1\0\1\6\7\0\1\57\1\60\1\0\1\61"+
    "\7\0\1\6\1\56\1\0\1\56\1\0\1\6\1\0"+
    "\1\6\1\225\5\6\1\0\3\6\2\57\1\0\1\57"+
    "\2\0\6\6\1\0\6\6\1\0\1\6\7\0\1\57"+
    "\1\60\1\0\1\61\23\0\1\114\67\0\1\226\67\0"+
    "\1\227\56\0\1\6\1\56\1\0\1\56\1\0\1\6"+
    "\1\0\5\6\1\105\1\6\1\0\3\6\2\57\1\0"+
    "\1\57\2\0\6\6\1\0\6\6\1\0\1\6\7\0"+
    "\1\57\1\60\1\0\1\61\7\0\1\6\1\56\1\0"+
    "\1\56\1\0\1\6\1\0\4\6\1\230\2\6\1\0"+
    "\3\6\2\57\1\0\1\57\2\0\6\6\1\0\6\6"+
    "\1\0\1\6\7\0\1\57\1\60\1\0\1\61\7\0"+
    "\1\6\1\56\1\0\1\56\1\0\1\6\1\0\3\6"+
    "\1\231\3\6\1\0\3\6\2\57\1\0\1\57\2\0"+
    "\6\6\1\0\6\6\1\0\1\6\7\0\1\57\1\60"+
    "\1\0\1\61\7\0\1\6\1\56\1\0\1\56\1\0"+
    "\1\6\1\0\7\6\1\232\1\133\2\6\2\57\1\0"+
    "\1\57\2\0\6\6\1\0\6\6\1\0\1\6\7\0"+
    "\1\57\1\60\1\0\1\61\23\0\1\233\54\0\1\6"+
    "\1\56\1\0\1\56\1\0\1\6\1\0\5\6\1\234"+
    "\1\6\1\0\3\6\2\57\1\0\1\57\2\0\6\6"+
    "\1\0\6\6\1\0\1\6\7\0\1\57\1\60\1\0"+
    "\1\61\7\0\1\6\1\56\1\0\1\56\1\0\1\6"+
    "\1\0\7\6\1\154\1\155\2\6\2\57\1\0\1\57"+
    "\2\0\6\6\1\0\6\6\1\0\1\6\7\0\1\57"+
    "\1\60\1\0\1\61\7\0\1\6\1\56\1\0\1\56"+
    "\1\0\1\6\1\0\7\6\1\0\3\6\2\57\1\0"+
    "\1\57\2\0\4\6\1\73\1\6\1\0\6\6\1\0"+
    "\1\6\7\0\1\57\1\60\1\0\1\61\7\0\1\6"+
    "\1\56\1\0\1\56\1\0\1\6\1\0\4\6\1\235"+
    "\2\6\1\0\3\6\2\57\1\0\1\57\2\0\6\6"+
    "\1\0\6\6\1\0\1\6\7\0\1\57\1\60\1\0"+
    "\1\61\43\0\1\173\34\0\1\6\1\56\1\0\1\56"+
    "\1\0\1\6\1\0\7\6\1\0\3\6\2\57\1\0"+
    "\1\57\2\0\4\6\1\174\1\6\1\0\6\6\1\0"+
    "\1\6\7\0\1\57\1\60\1\0\1\61\7\0\1\6"+
    "\1\56\1\0\1\56\1\0\1\6\1\0\1\6\1\236"+
    "\5\6\1\0\3\6\2\57\1\0\1\57\2\0\6\6"+
    "\1\0\6\6\1\0\1\6\7\0\1\57\1\60\1\0"+
    "\1\61\7\0\1\6\1\56\1\0\1\56\1\0\1\6"+
    "\1\0\5\6\1\237\1\6\1\0\3\6\2\57\1\0"+
    "\1\57\2\0\6\6\1\0\6\6\1\0\1\6\7\0"+
    "\1\57\1\60\1\0\1\61\7\0\1\6\1\56\1\0"+
    "\1\56\1\0\1\6\1\0\7\6\1\0\3\6\2\57"+
    "\1\0\1\57\2\0\5\6\1\240\1\0\6\6\1\0"+
    "\1\6\7\0\1\57\1\60\1\0\1\61\7\0\1\6"+
    "\1\56\1\0\1\56\1\0\1\6\1\0\3\6\1\241"+
    "\3\6\1\0\3\6\2\57\1\0\1\57\2\0\6\6"+
    "\1\0\6\6\1\0\1\6\7\0\1\57\1\60\1\0"+
    "\1\61\57\0\1\162\13\0\70\242\1\243\2\242\1\163"+
    "\65\242\1\243\5\0\1\62\1\244\1\0\1\244\1\0"+
    "\1\245\1\0\7\62\1\0\3\62\2\64\1\0\1\64"+
    "\2\0\6\62\1\0\6\62\1\0\1\62\7\0\1\64"+
    "\1\65\1\0\1\66\1\0\1\67\1\0\1\246\4\0"+
    "\1\247\1\0\1\247\2\0\1\246\41\0\1\246\20\0"+
    "\1\62\1\171\1\0\1\171\1\206\1\62\1\0\7\62"+
    "\1\0\3\62\2\64\1\0\1\64\2\0\6\62\1\0"+
    "\6\62\1\0\1\62\7\0\1\64\1\65\1\0\1\66"+
    "\1\0\1\67\6\0\1\166\1\0\1\166\1\0\1\170"+
    "\70\0\1\114\24\0\1\114\36\0\1\6\1\56\1\0"+
    "\1\56\1\0\1\105\1\0\7\6\1\0\3\6\2\57"+
    "\1\0\1\57\2\0\2\6\1\105\3\6\1\0\6\6"+
    "\1\0\1\6\7\0\1\57\1\60\1\0\1\61\7\0"+
    "\1\6\1\56\1\0\1\56\1\0\1\6\1\0\1\250"+
    "\6\6\1\0\3\6\2\57\1\0\1\57\2\0\6\6"+
    "\1\0\6\6\1\0\1\6\7\0\1\57\1\60\1\0"+
    "\1\61\7\0\1\6\1\56\1\0\1\56\1\0\1\6"+
    "\1\0\1\6\1\134\5\6\1\0\3\6\2\57\1\0"+
    "\1\57\2\0\6\6\1\0\6\6\1\0\1\6\7\0"+
    "\1\57\1\60\1\0\1\61\7\0\1\6\1\56\1\0"+
    "\1\56\1\0\1\6\1\0\2\6\1\105\4\6\1\0"+
    "\3\6\2\57\1\0\1\57\2\0\4\6\1\105\1\6"+
    "\1\0\6\6\1\0\1\6\7\0\1\57\1\60\1\0"+
    "\1\61\7\0\1\6\1\56\1\0\1\56\1\0\1\6"+
    "\1\0\3\6\1\251\3\6\1\0\3\6\2\57\1\0"+
    "\1\57\2\0\6\6\1\0\6\6\1\0\1\6\7\0"+
    "\1\57\1\60\1\0\1\61\7\0\1\6\1\56\1\0"+
    "\1\56\1\0\1\252\1\0\7\6\1\0\3\6\2\57"+
    "\1\0\1\57\2\0\2\6\1\252\3\6\1\0\6\6"+
    "\1\0\1\6\7\0\1\57\1\60\1\0\1\61\7\0"+
    "\1\6\1\56\1\0\1\56\1\0\1\6\1\0\1\6"+
    "\1\105\5\6\1\0\3\6\2\57\1\0\1\57\2\0"+
    "\6\6\1\0\6\6\1\0\1\6\7\0\1\57\1\60"+
    "\1\0\1\61\25\0\2\253\51\0\1\6\1\56\1\0"+
    "\1\56\1\0\1\6\1\0\7\6\1\253\1\254\2\6"+
    "\2\57\1\0\1\57\2\0\6\6\1\0\6\6\1\0"+
    "\1\6\7\0\1\57\1\60\1\0\1\61\10\0\1\255"+
    "\1\0\1\255\72\0\1\256\24\0\1\256\36\0\2\117"+
    "\1\0\1\117\1\0\1\257\1\0\7\117\1\0\3\117"+
    "\6\0\2\117\1\257\3\117\1\0\6\117\1\0\1\117"+
    "\15\0\30\211\1\260\1\214\1\261\44\211\1\212\1\211"+
    "\1\212\1\262\15\211\1\263\1\264\1\214\1\265\30\211"+
    "\1\263\1\266\1\211\1\267\1\211\1\217\5\261\1\270"+
    "\1\271\1\261\1\271\1\261\1\270\1\261\7\270\1\261"+
    "\3\270\2\213\1\0\1\213\2\261\6\270\1\261\6\270"+
    "\1\261\1\270\7\261\1\213\1\272\1\261\1\273\1\261"+
    "\1\274\30\214\1\0\1\214\1\0\36\214\30\211\1\260"+
    "\1\214\1\261\32\211\1\124\1\211\1\124\31\211\1\260"+
    "\1\214\1\261\34\211\1\124\1\211\30\217\1\275\1\276"+
    "\1\274\35\217\1\263\5\0\1\6\1\56\1\0\1\56"+
    "\1\0\1\6\1\0\7\6\1\277\1\203\2\6\2\57"+
    "\1\0\1\57\2\0\6\6\1\0\6\6\1\0\1\6"+
    "\7\0\1\57\1\60\1\0\1\61\7\0\1\6\1\56"+
    "\1\0\1\56\1\0\1\6\1\0\7\6\1\0\3\6"+
    "\2\57\1\0\1\57\2\0\4\6\1\300\1\6\1\0"+
    "\6\6\1\0\1\6\7\0\1\57\1\60\1\0\1\61"+
    "\7\0\1\6\1\56\1\0\1\56\1\0\1\6\1\0"+
    "\3\6\1\105\3\6\1\0\3\6\2\57\1\0\1\57"+
    "\2\0\6\6\1\0\6\6\1\0\1\6\7\0\1\57"+
    "\1\60\1\0\1\61\7\0\1\6\1\56\1\0\1\56"+
    "\1\0\1\100\1\0\7\6\1\0\3\6\2\57\1\0"+
    "\1\57\2\0\2\6\1\100\3\6\1\0\6\6\1\0"+
    "\1\6\7\0\1\57\1\60\1\0\1\61\7\0\1\6"+
    "\1\56\1\0\1\56\1\0\1\6\1\0\7\6\1\0"+
    "\3\6\2\57\1\0\1\57\2\0\3\6\1\301\2\6"+
    "\1\0\6\6\1\0\1\6\7\0\1\57\1\60\1\0"+
    "\1\61\7\0\1\6\1\56\1\0\1\56\1\0\1\6"+
    "\1\0\7\6\1\0\3\6\2\57\1\0\1\57\2\0"+
    "\6\6\1\140\1\143\5\6\1\0\1\6\7\0\1\57"+
    "\1\60\1\0\1\61\25\0\2\302\64\0\1\303\55\0"+
    "\1\6\1\56\1\0\1\56\1\0\1\6\1\0\7\6"+
    "\1\302\1\304\2\6\2\57\1\0\1\57\2\0\6\6"+
    "\1\0\6\6\1\0\1\6\7\0\1\57\1\60\1\0"+
    "\1\61\7\0\1\6\1\56\1\0\1\56\1\0\1\6"+
    "\1\0\4\6\1\305\2\6\1\0\3\6\2\57\1\0"+
    "\1\57\2\0\6\6\1\0\6\6\1\0\1\6\7\0"+
    "\1\57\1\60\1\0\1\61\23\0\1\173\114\0\1\114"+
    "\30\0\1\6\1\56\1\0\1\56\1\0\1\6\1\0"+
    "\7\6\1\0\3\6\2\57\1\0\1\57\2\0\6\6"+
    "\1\0\1\6\1\105\4\6\1\0\1\6\7\0\1\57"+
    "\1\60\1\0\1\61\7\0\1\6\1\56\1\0\1\56"+
    "\1\0\1\6\1\0\7\6\1\0\3\6\2\57\1\0"+
    "\1\57\2\0\6\6\1\0\2\6\1\306\3\6\1\0"+
    "\1\6\7\0\1\57\1\60\1\0\1\61\7\0\1\6"+
    "\1\56\1\0\1\56\1\0\1\6\1\0\7\6\1\0"+
    "\3\6\2\57\1\0\1\57\2\0\5\6\1\307\1\0"+
    "\6\6\1\0\1\6\7\0\1\57\1\60\1\0\1\61"+
    "\7\0\1\6\1\56\1\0\1\56\1\0\1\6\1\0"+
    "\7\6\1\77\1\100\2\6\2\57\1\0\1\57\2\0"+
    "\6\6\1\0\6\6\1\0\1\6\7\0\1\57\1\60"+
    "\1\0\1\61\7\0\1\6\1\56\1\0\1\56\1\0"+
    "\1\6\1\0\7\6\1\0\3\6\2\57\1\0\1\57"+
    "\2\0\6\6\1\0\6\6\1\310\1\311\7\0\1\57"+
    "\1\60\1\0\1\61\7\0\1\6\1\56\1\0\1\56"+
    "\1\0\1\6\1\0\7\6\1\0\3\6\2\57\1\0"+
    "\1\57\2\0\3\6\1\312\1\6\1\313\1\0\6\6"+
    "\1\0\1\6\7\0\1\57\1\60\1\0\1\61\2\0"+
    "\70\242\1\165\5\0\1\62\1\244\1\0\1\244\1\206"+
    "\1\245\1\0\7\62\1\0\3\62\2\64\1\0\1\64"+
    "\2\0\6\62\1\0\6\62\1\0\1\62\7\0\1\64"+
    "\1\65\1\0\1\66\1\0\1\67\1\0\1\314\3\0"+
    "\1\62\1\315\1\0\1\315\1\0\1\62\1\314\7\62"+
    "\1\0\3\62\6\0\6\62\1\0\6\62\1\0\1\62"+
    "\1\0\1\314\21\0\1\247\1\0\1\247\65\0\1\6"+
    "\1\56\1\0\1\56\1\0\1\6\1\0\7\6\1\0"+
    "\3\6\2\57\1\0\1\57\2\0\1\105\5\6\1\0"+
    "\6\6\1\0\1\6\7\0\1\57\1\60\1\0\1\61"+
    "\7\0\1\6\1\56\1\0\1\56\1\0\1\6\1\0"+
    "\4\6\1\72\2\6\1\0\3\6\2\57\1\0\1\57"+
    "\2\0\6\6\1\0\6\6\1\0\1\6\7\0\1\57"+
    "\1\60\1\0\1\61\7\0\1\6\1\56\1\0\1\56"+
    "\1\0\1\6\1\0\1\143\6\6\1\0\3\6\2\57"+
    "\1\0\1\57\2\0\6\6\1\0\6\6\1\0\1\6"+
    "\7\0\1\57\1\60\1\0\1\61\17\0\1\173\60\0"+
    "\1\6\1\56\1\0\1\56\1\0\1\6\1\0\1\6"+
    "\1\174\5\6\1\0\3\6\2\57\1\0\1\57\2\0"+
    "\6\6\1\0\6\6\1\0\1\6\7\0\1\57\1\60"+
    "\1\0\1\61\7\0\1\62\1\316\1\0\1\316\1\0"+
    "\1\317\1\0\7\62\1\0\3\62\2\64\1\0\1\64"+
    "\2\0\6\62\1\0\6\62\1\0\1\62\7\0\1\64"+
    "\1\65\1\0\1\66\1\0\1\67\15\0\1\320\60\0"+
    "\2\117\1\0\1\117\1\0\1\117\1\0\1\117\1\321"+
    "\5\117\1\0\3\117\6\0\6\117\1\0\6\117\1\0"+
    "\1\117\15\0\30\261\1\260\1\0\1\322\66\261\1\260"+
    "\1\0\37\261\6\211\1\323\1\211\1\323\17\211\1\260"+
    "\1\214\1\261\44\211\1\212\1\211\1\212\16\211\1\263"+
    "\1\264\1\214\1\265\30\211\1\263\1\266\1\211\1\267"+
    "\1\211\1\217\5\261\1\324\1\325\1\261\1\325\1\261"+
    "\1\324\1\261\7\324\1\261\3\324\1\265\1\264\1\0"+
    "\1\326\2\261\6\324\1\261\6\324\1\261\1\324\7\261"+
    "\1\265\1\327\1\261\1\330\1\261\1\274\5\261\1\324"+
    "\1\325\1\261\1\325\1\261\1\324\1\261\7\324\1\261"+
    "\3\324\1\265\1\264\1\0\1\265\2\261\6\324\1\261"+
    "\6\324\1\261\1\324\7\261\1\265\1\327\1\261\1\330"+
    "\1\261\1\274\30\211\1\260\1\214\1\261\32\211\1\263"+
    "\1\211\1\263\31\211\1\260\1\214\1\261\34\211\1\263"+
    "\1\211\5\261\2\270\1\261\1\270\1\261\1\270\1\261"+
    "\7\270\1\261\3\270\1\261\1\260\1\0\3\261\6\270"+
    "\1\261\6\270\1\261\1\270\22\261\1\270\1\271\1\261"+
    "\1\271\1\331\1\270\1\261\7\270\1\261\3\270\1\265"+
    "\1\264\1\0\1\265\2\261\6\270\1\261\6\270\1\261"+
    "\1\270\7\261\1\265\1\327\1\261\1\330\1\261\1\274"+
    "\30\261\1\260\1\0\33\261\1\213\1\261\1\213\31\261"+
    "\1\260\1\0\35\261\1\213\1\261\30\274\1\275\1\67"+
    "\36\274\1\265\30\274\1\275\1\67\1\332\35\274\1\265"+
    "\30\276\1\67\1\276\1\67\35\276\1\333\15\0\1\114"+
    "\60\0\1\6\1\56\1\0\1\56\1\0\1\334\1\0"+
    "\7\6\1\0\3\6\2\57\1\0\1\57\2\0\2\6"+
    "\1\334\3\6\1\0\6\6\1\0\1\6\7\0\1\57"+
    "\1\60\1\0\1\61\7\0\1\6\1\56\1\0\1\56"+
    "\1\0\1\6\1\0\7\6\1\335\1\336\2\6\2\57"+
    "\1\0\1\57\2\0\6\6\1\0\6\6\1\0\1\6"+
    "\7\0\1\57\1\60\1\0\1\61\17\0\1\337\74\0"+
    "\1\340\54\0\1\6\1\56\1\0\1\56\1\0\1\6"+
    "\1\0\1\6\1\341\5\6\1\0\3\6\2\57\1\0"+
    "\1\57\2\0\6\6\1\0\6\6\1\0\1\6\7\0"+
    "\1\57\1\60\1\0\1\61\7\0\1\6\1\56\1\0"+
    "\1\56\1\0\1\6\1\0\5\6\1\301\1\6\1\0"+
    "\3\6\2\57\1\0\1\57\2\0\6\6\1\0\6\6"+
    "\1\0\1\6\7\0\1\57\1\60\1\0\1\61\7\0"+
    "\1\6\1\56\1\0\1\56\1\0\1\6\1\0\1\251"+
    "\6\6\1\0\3\6\2\57\1\0\1\57\2\0\6\6"+
    "\1\0\6\6\1\0\1\6\7\0\1\57\1\60\1\0"+
    "\1\61\7\0\1\6\1\56\1\0\1\56\1\0\1\6"+
    "\1\0\5\6\1\342\1\6\1\0\3\6\2\57\1\0"+
    "\1\57\2\0\6\6\1\0\6\6\1\0\1\6\7\0"+
    "\1\57\1\60\1\0\1\61\14\0\1\343\24\0\1\343"+
    "\36\0\1\6\1\56\1\0\1\56\1\0\1\72\1\0"+
    "\7\6\1\0\3\6\2\57\1\0\1\57\2\0\2\6"+
    "\1\72\3\6\1\0\6\6\1\0\1\6\7\0\1\57"+
    "\1\60\1\0\1\61\7\0\1\6\1\56\1\0\1\56"+
    "\1\0\1\6\1\0\4\6\1\344\2\6\1\0\3\6"+
    "\2\57\1\0\1\57\2\0\6\6\1\0\6\6\1\0"+
    "\1\6\7\0\1\57\1\60\1\0\1\61\7\0\1\6"+
    "\1\56\1\0\1\56\1\0\1\345\1\0\7\6\1\0"+
    "\3\6\2\57\1\0\1\57\2\0\2\6\1\345\3\6"+
    "\1\0\6\6\1\0\1\6\7\0\1\57\1\60\1\0"+
    "\1\61\10\0\1\346\1\0\1\346\65\0\1\62\1\347"+
    "\1\0\1\347\1\350\1\351\1\0\7\62\1\0\3\62"+
    "\2\64\1\0\1\64\2\0\6\62\1\0\6\62\1\0"+
    "\1\62\7\0\1\64\1\65\1\0\1\66\1\0\1\67"+
    "\5\0\1\62\1\316\1\0\1\316\1\206\1\317\1\0"+
    "\7\62\1\0\3\62\2\64\1\0\1\64\2\0\6\62"+
    "\1\0\6\62\1\0\1\62\7\0\1\64\1\65\1\0"+
    "\1\66\1\0\1\67\1\0\1\352\3\0\1\62\1\353"+
    "\1\0\1\353\1\0\1\62\1\352\7\62\1\0\3\62"+
    "\6\0\6\62\1\0\6\62\1\0\1\62\1\0\1\352"+
    "\62\0\1\354\26\0\2\117\1\0\1\117\1\0\1\117"+
    "\1\0\7\117\1\0\3\117\6\0\6\117\1\0\3\117"+
    "\1\355\2\117\1\0\1\117\15\0\6\211\1\356\1\211"+
    "\1\356\1\211\1\357\14\211\1\263\1\264\1\214\1\265"+
    "\30\211\1\263\1\266\1\211\1\267\1\211\1\217\5\261"+
    "\1\324\4\261\1\324\1\261\7\324\1\261\3\324\1\261"+
    "\1\260\1\0\3\261\6\324\1\261\6\324\1\261\1\324"+
    "\22\261\1\324\1\325\1\261\1\325\1\331\1\324\1\261"+
    "\7\324\1\261\3\324\1\265\1\264\1\0\1\265\2\261"+
    "\6\324\1\261\6\324\1\261\1\324\7\261\1\265\1\327"+
    "\1\261\1\330\1\261\1\274\30\261\1\260\1\0\33\261"+
    "\1\265\1\261\1\265\31\261\1\260\1\0\35\261\1\265"+
    "\7\261\1\360\1\261\1\360\17\261\1\260\1\0\37\261"+
    "\6\214\1\361\1\214\1\361\16\214\1\333\1\64\1\214"+
    "\1\64\30\214\1\333\1\362\1\214\1\363\1\214\1\276"+
    "\5\0\1\6\1\56\1\0\1\56\1\0\1\6\1\0"+
    "\1\203\6\6\1\0\3\6\2\57\1\0\1\57\2\0"+
    "\6\6\1\0\6\6\1\0\1\6\7\0\1\57\1\60"+
    "\1\0\1\61\17\0\1\140\60\0\1\6\1\56\1\0"+
    "\1\56\1\0\1\6\1\0\1\6\1\143\5\6\1\0"+
    "\3\6\2\57\1\0\1\57\2\0\6\6\1\0\6\6"+
    "\1\0\1\6\7\0\1\57\1\60\1\0\1\61\42\0"+
    "\1\114\53\0\2\335\51\0\1\6\1\56\1\0\1\56"+
    "\1\0\1\6\1\0\7\6\1\0\3\6\2\57\1\0"+
    "\1\57\2\0\3\6\1\105\2\6\1\0\6\6\1\0"+
    "\1\6\7\0\1\57\1\60\1\0\1\61\7\0\1\6"+
    "\1\56\1\0\1\56\1\0\1\6\1\0\7\6\1\364"+
    "\1\365\2\6\2\57\1\0\1\57\2\0\6\6\1\0"+
    "\6\6\1\0\1\6\7\0\1\57\1\60\1\0\1\61"+
    "\20\0\1\114\57\0\1\6\1\56\1\0\1\56\1\0"+
    "\1\6\1\0\1\366\6\6\1\0\3\6\2\57\1\0"+
    "\1\57\2\0\6\6\1\0\6\6\1\0\1\6\7\0"+
    "\1\57\1\60\1\0\1\61\7\0\1\6\1\56\1\0"+
    "\1\56\1\0\1\6\1\0\2\6\1\367\4\6\1\0"+
    "\3\6\2\57\1\0\1\57\2\0\6\6\1\0\6\6"+
    "\1\0\1\6\7\0\1\57\1\60\1\0\1\61\7\0"+
    "\1\62\1\347\1\0\1\347\1\0\1\351\1\0\7\62"+
    "\1\0\3\62\2\64\1\0\1\64\2\0\6\62\1\0"+
    "\6\62\1\0\1\62\7\0\1\64\1\65\1\0\1\66"+
    "\1\0\1\67\5\0\1\62\1\347\1\0\1\347\1\206"+
    "\1\351\1\0\7\62\1\0\3\62\2\64\1\0\1\64"+
    "\2\0\6\62\1\0\6\62\1\0\1\62\7\0\1\64"+
    "\1\65\1\0\1\66\1\0\1\67\33\0\1\370\36\0"+
    "\1\371\3\0\1\62\1\372\1\0\1\372\1\0\1\62"+
    "\1\371\7\62\1\0\3\62\6\0\6\62\1\0\6\62"+
    "\1\0\1\62\1\0\1\371\21\0\1\353\1\0\1\353"+
    "\65\0\1\62\1\373\1\0\1\373\1\0\1\374\1\0"+
    "\7\62\1\0\3\62\2\64\1\0\1\64\2\0\6\62"+
    "\1\0\6\62\1\0\1\62\7\0\1\64\1\65\1\0"+
    "\1\66\1\0\1\67\23\0\2\375\51\0\2\117\1\0"+
    "\1\117\1\0\1\117\1\0\7\117\1\375\1\376\2\117"+
    "\6\0\6\117\1\0\6\117\1\0\1\117\15\0\6\211"+
    "\1\356\1\211\1\356\1\262\1\357\14\211\1\263\1\264"+
    "\1\214\1\265\30\211\1\263\1\266\1\211\1\267\1\211"+
    "\1\217\1\211\1\377\4\211\1\u0100\1\211\1\u0100\2\211"+
    "\1\377\14\211\1\260\1\214\1\261\22\211\1\377\13\211"+
    "\5\261\1\324\1\u0101\1\261\1\u0101\1\261\1\u0102\1\261"+
    "\7\324\1\261\3\324\1\265\1\264\1\0\1\265\2\261"+
    "\6\324\1\261\6\324\1\261\1\324\7\261\1\265\1\327"+
    "\1\261\1\330\1\261\1\274\6\214\1\361\1\214\1\361"+
    "\1\u0103\15\214\1\333\1\64\1\214\1\64\30\214\1\333"+
    "\1\362\1\214\1\363\1\214\1\276\30\214\1\0\1\214"+
    "\1\0\32\214\1\333\1\214\1\333\31\214\1\0\1\214"+
    "\1\0\34\214\1\333\1\214\17\0\1\277\56\0\1\6"+
    "\1\56\1\0\1\56\1\0\1\6\1\0\3\6\1\203"+
    "\3\6\1\0\3\6\2\57\1\0\1\57\2\0\6\6"+
    "\1\0\6\6\1\0\1\6\7\0\1\57\1\60\1\0"+
    "\1\61\7\0\1\6\1\56\1\0\1\56\1\0\1\6"+
    "\1\0\7\6\1\0\2\6\1\105\2\57\1\0\1\57"+
    "\2\0\6\6\1\0\6\6\1\0\1\6\7\0\1\57"+
    "\1\60\1\0\1\61\7\0\1\6\1\56\1\0\1\56"+
    "\1\0\1\6\1\0\7\6\1\0\3\6\2\57\1\0"+
    "\1\57\2\0\6\6\1\0\4\6\1\u0104\1\6\1\0"+
    "\1\6\7\0\1\57\1\60\1\0\1\61\20\0\1\u0105"+
    "\60\0\1\u0106\1\0\1\u0106\65\0\1\62\1\u0107\1\0"+
    "\1\u0107\1\350\1\62\1\0\7\62\1\0\3\62\2\64"+
    "\1\0\1\64\2\0\6\62\1\0\6\62\1\0\1\62"+
    "\7\0\1\64\1\65\1\0\1\66\1\0\1\67\5\0"+
    "\1\62\1\373\1\0\1\373\1\206\1\374\1\0\7\62"+
    "\1\0\3\62\2\64\1\0\1\64\2\0\6\62\1\0"+
    "\6\62\1\0\1\62\7\0\1\64\1\65\1\0\1\66"+
    "\1\0\1\67\1\0\1\u0108\3\0\1\62\1\64\1\0"+
    "\1\64\1\0\1\62\1\u0108\7\62\1\0\3\62\6\0"+
    "\6\62\1\0\6\62\1\0\1\62\1\0\1\u0108\34\0"+
    "\1\u0109\54\0\2\117\1\0\1\117\1\0\1\117\1\0"+
    "\5\117\1\u010a\1\117\1\0\3\117\6\0\6\117\1\0"+
    "\6\117\1\0\1\117\15\0\6\211\1\u0100\1\211\1\u0100"+
    "\17\211\1\260\1\214\1\261\44\211\1\u010b\1\211\1\u010b"+
    "\1\211\1\u010c\14\211\1\263\1\264\1\214\1\265\30\211"+
    "\1\263\1\266\1\211\1\267\1\211\1\217\5\261\1\324"+
    "\1\u0101\1\261\1\u0101\1\331\1\u0102\1\261\7\324\1\261"+
    "\3\324\1\265\1\264\1\0\1\265\2\261\6\324\1\261"+
    "\6\324\1\261\1\324\7\261\1\265\1\327\1\261\1\330"+
    "\1\261\1\274\1\261\1\u010d\3\261\1\324\1\u010e\1\261"+
    "\1\u010e\1\261\1\324\1\u010d\7\324\1\261\3\324\1\261"+
    "\1\260\1\0\3\261\6\324\1\261\6\324\1\261\1\324"+
    "\1\261\1\u010d\13\261\6\214\1\u010f\1\214\1\u010f\17\214"+
    "\1\0\1\214\1\0\36\214\5\0\1\6\1\56\1\0"+
    "\1\56\1\0\1\6\1\0\4\6\1\174\2\6\1\0"+
    "\3\6\2\57\1\0\1\57\2\0\6\6\1\0\6\6"+
    "\1\0\1\6\7\0\1\57\1\60\1\0\1\61\25\0"+
    "\2\u0110\51\0\1\62\1\u0107\1\0\1\u0107\1\0\1\62"+
    "\1\0\7\62\1\0\3\62\2\64\1\0\1\64\2\0"+
    "\6\62\1\0\6\62\1\0\1\62\7\0\1\64\1\65"+
    "\1\0\1\66\1\0\1\67\5\0\1\62\1\u0107\1\0"+
    "\1\u0107\1\206\1\62\1\0\7\62\1\0\3\62\2\64"+
    "\1\0\1\64\2\0\6\62\1\0\6\62\1\0\1\62"+
    "\7\0\1\64\1\65\1\0\1\66\1\0\1\67\6\0"+
    "\1\64\1\0\1\64\103\0\2\u0111\51\0\2\117\1\0"+
    "\1\117\1\0\1\117\1\0\7\117\1\u0111\3\117\6\0"+
    "\6\117\1\0\6\117\1\0\1\117\15\0\6\211\1\u010b"+
    "\1\211\1\u010b\1\262\1\u010c\14\211\1\263\1\264\1\214"+
    "\1\265\30\211\1\263\1\266\1\211\1\267\1\211\1\217"+
    "\1\211\1\u0112\4\211\1\263\1\211\1\263\2\211\1\u0112"+
    "\14\211\1\260\1\214\1\261\22\211\1\u0112\13\211\6\261"+
    "\1\u010e\1\261\1\u010e\17\261\1\260\1\0\44\261\1\324"+
    "\1\u0113\1\261\1\u0113\1\261\1\u0114\1\261\7\324\1\261"+
    "\3\324\1\265\1\264\1\0\1\265\2\261\6\324\1\261"+
    "\6\324\1\261\1\324\7\261\1\265\1\327\1\261\1\330"+
    "\1\261\1\274\6\214\1\u0115\1\214\1\u0115\1\214\1\u0116"+
    "\14\214\1\333\1\64\1\214\1\64\30\214\1\333\1\362"+
    "\1\214\1\363\1\214\1\276\40\0\1\u0117\77\0\1\u0118"+
    "\21\0\6\211\1\263\1\211\1\263\17\211\1\260\1\214"+
    "\1\261\36\211\5\261\1\324\1\u0113\1\261\1\u0113\1\331"+
    "\1\u0114\1\261\7\324\1\261\3\324\1\265\1\264\1\0"+
    "\1\265\2\261\6\324\1\261\6\324\1\261\1\324\7\261"+
    "\1\265\1\327\1\261\1\330\1\261\1\274\1\261\1\u0119"+
    "\3\261\1\324\1\265\1\261\1\265\1\261\1\324\1\u0119"+
    "\7\324\1\261\3\324\1\261\1\260\1\0\3\261\6\324"+
    "\1\261\6\324\1\261\1\324\1\261\1\u0119\13\261\6\214"+
    "\1\u0115\1\214\1\u0115\1\u0103\1\u0116\14\214\1\333\1\64"+
    "\1\214\1\64\30\214\1\333\1\362\1\214\1\363\1\214"+
    "\1\276\1\214\1\u011a\4\214\1\u011b\1\214\1\u011b\2\214"+
    "\1\u011a\14\214\1\0\1\214\1\0\22\214\1\u011a\13\214"+
    "\23\0\2\u011c\56\0\1\u011d\24\0\1\u011d\31\0\6\261"+
    "\1\265\1\261\1\265\17\261\1\260\1\0\37\261\6\214"+
    "\1\u011b\1\214\1\u011b\17\214\1\0\1\214\1\0\44\214"+
    "\1\u011e\1\214\1\u011e\1\214\1\u011f\14\214\1\333\1\64"+
    "\1\214\1\64\30\214\1\333\1\362\1\214\1\363\1\214"+
    "\1\276\21\0\1\u0120\67\0\1\u0121\50\0\6\214\1\u011e"+
    "\1\214\1\u011e\1\u0103\1\u011f\14\214\1\333\1\64\1\214"+
    "\1\64\30\214\1\333\1\362\1\214\1\363\1\214\1\276"+
    "\1\214\1\u0122\4\214\1\333\1\214\1\333\2\214\1\u0122"+
    "\14\214\1\0\1\214\1\0\22\214\1\u0122\13\214\31\0"+
    "\1\u0123\37\0\6\214\1\333\1\214\1\333\17\214\1\0"+
    "\1\214\1\0\36\214\61\0\1\u0124\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15732];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\1\1\1\11\41\1\1\11\11\1\2\0"+
    "\2\1\4\0\7\1\1\0\2\1\1\0\11\1\1\11"+
    "\4\1\1\0\3\1\2\0\1\11\10\1\3\0\4\1"+
    "\1\0\4\1\1\0\13\1\2\0\1\1\1\0\3\1"+
    "\1\11\4\1\1\0\1\1\2\0\16\1\2\0\2\1"+
    "\2\0\12\1\1\0\4\1\1\0\1\1\2\0\1\1"+
    "\2\0\2\1\2\0\4\1\4\0\1\1\1\0\2\1"+
    "\2\0\4\1\1\0\3\1\1\0\1\1\1\0\1\1"+
    "\1\0\4\1\1\0\1\1\3\0\3\1\1\0\1\1"+
    "\2\0\2\1\1\0\4\1\1\0\1\1\3\0\3\1"+
    "\1\0\3\1\1\0\3\1\2\0\1\1\1\0\1\1"+
    "\1\0\3\1\1\0\3\1\1\0\2\1\2\0\3\1"+
    "\2\0\1\1\2\0\1\1\1\0\3\1\3\0\2\1"+
    "\2\0\2\1\1\0\1\11\1\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[292];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
 
 /* Cï¿½digo personalizado */
 
 // Se agregï¿½ una propiedad para verificar si existen tokens pendientes
 private boolean _existenTokens = false;
 
 public boolean existenTokens(){
 return this._existenTokens;
 }
 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ScannerABC(java.io.Reader in) {
   /* Cï¿½digo que se ejecutarï¿½ en el constructor de la clase */
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 270) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
     
 /* Cï¿½digo a ejecutar al finalizar el anï¿½lisis, en este caso cambiaremos el valor de una variable bandera */
 this._existenTokens = false;
 

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { //Espacios y tabuladores
            }
          case 19: break;
          case 2: 
            { Token t = new Token(yytext(), Types.ERROR_INVALID_CHARACTER, yyline);
 this._existenTokens = true;
 return t;
            }
          case 20: break;
          case 3: 
            { /*Token t = new Token("Enter", Types.IDENTIFIER);
 this._existenTokens = true;
 return t;*/
            }
          case 21: break;
          case 4: 
            { Token t = new Token(yytext(), Types.IDENTIFIER, yyline);
 this._existenTokens = true;
 return t;
            }
          case 22: break;
          case 5: 
            { Token t = new Token(yytext(), Types.ERROR_INTEGER, yyline);
 this._existenTokens = true;
 return t;
            }
          case 23: break;
          case 6: 
            { Token t = new Token(yytext(), Types.OPERATOR, yyline);
 this._existenTokens = true;
 return t;
            }
          case 24: break;
          case 7: 
            { Token t = new Token(yytext(), Types.ERROR_COMMENT, yyline);
 this._existenTokens = true;
 return t;
            }
          case 25: break;
          case 8: 
            { Token t = new Token(yytext(), Types.ERROR_STRING, yyline);
 this._existenTokens = true;
 return t;
            }
          case 26: break;
          case 9: 
            { Token t = new Token(yytext(), Types.ERROR_IDENTIFIER, yyline);
 this._existenTokens = true;
 return t;
            }
          case 27: break;
          case 10: 
            { Token t = new Token(yytext(), Types.ERROR_FLOATING_POINT, yyline);
 this._existenTokens = true;
 return t;
            }
          case 28: break;
          case 11: 
            { Token t = new Token(yytext(), Types.RESERVED, yyline);
 this._existenTokens = true;
 return t;
            }
          case 29: break;
          case 12: 
            { Token t = new Token(yytext(), Types.LOGICAL_OPERATOR, yyline);
 this._existenTokens = true;
 return t;
            }
          case 30: break;
          case 13: 
            { // Comentario de bloque 1
            }
          case 31: break;
          case 14: 
            { Token t = new Token(yytext(), Types.STRING_LITERAL, yyline);
 this._existenTokens = true;
 return t;
            }
          case 32: break;
          case 15: 
            { Token t = new Token(yytext(), Types.FLOATING_POINT_NUMERIC_LITERAL, yyline);
 this._existenTokens = true;
 return t;
            }
          case 33: break;
          case 16: 
            { Token t = new Token(yytext(), Types.INTEGER_NUMERIC_LITERAL, yyline);
 this._existenTokens = true;
 return t;
            }
          case 34: break;
          case 17: 
            { Token t = new Token(yytext(), Types.CHAR_LITERAL, yyline);
 this._existenTokens = true;
 return t;
            }
          case 35: break;
          case 18: 
            { Token t = new Token(yytext(), Types.SCIENTIFIC_NOTATION_NUMERIC_LITERAL, yyline);
 this._existenTokens = true;
 return t;
            }
          case 36: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
